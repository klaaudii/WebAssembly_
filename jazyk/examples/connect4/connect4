(define board-state (list (vector 0 0 0 0 0 0 0)
                          (vector 0 0 0 0 0 0 0)
                          (vector 0 0 0 0 0 0 0)
                          (vector 0 0 0 0 0 0 0)
                          (vector 0 0 0 0 0 0 0)
                          (vector 0 0 0 0 0 0 0)))

(define red (color 220 0 0 255))
(define bg (color 0 0 170 255))
(define blue (color 0 0 200 255))
(define yellow (color 255 220 0 255))
(define token-radius 45)
(define board (canvas 700 600))
(define player 1)
(define game-end 0)
(define n-tokens 0)


(define (draw-token x y col)
(fill-circle board (+ 50 (* x 100)) (+ 50 (* y 100)) token-radius col))

(define (draw-token-row i j)
(if (<= j 7) (begin (draw-token j i bg) (draw-token-row i (+ j 1))) (begin)))

(define (draw-token-spaces i)
(if (<= i 6) (begin (draw-token-row i 0) (draw-token-spaces (+ i 1))) (begin)))

(define (draw-board)
(fill-rect board 0 0 700 600 blue)
(draw-token-spaces 0))

(define (token-space-is-empty r c)
(if (> r 5) 0 (if (= (vector-ref (list-ref board-state r) c) 0) 1 0)))

(define (get-dir-token-count r c dr dc count)
(let* ((nr (+ r dr)) (nc (+ c dc)))
(if (and (<= nr 5) (>= nr 0) (>= nc 0) (<= nc 6))
    (if (= (vector-ref (list-ref board-state r) c)
        (vector-ref (list-ref board-state nr) nc))
        (get-dir-token-count nr nc dr dc (+ 1 count)) count) count)))

(define (check-dir r c dr dc)
(if (> (+ (get-dir-token-count r c dr dc 0)
(get-dir-token-count r c (* -1 dr) (* -1 dc) 0)) 2) 1 0))

(define (check-four r c)
(if (= (check-dir r c 0 1) 1) 1
(if (= (check-dir r c 1 0) 1) 1
(if (= (check-dir r c 1 -1) 1) 1
(if (= (check-dir r c 1 1) 1) 1 0)))))

(define (set-start-board-row vec i)
(if (<= i 6)
        (begin (vector-set! vec i 0) (set-start-board-row vec (+ i 1))) (begin)))

(define (set-start-board board)
(if (null? board) (begin)
(begin (set-start-board-row (car board) 0)
(set-start-board (cdr board)))))

(define (new-game)
(set-start-board board-state)
(set! player 1)
(draw-board)
(set! game-end 0)
(set! n-tokens 0))

(define (put-token r c)
(set! n-tokens (+ 1 n-tokens))
(if (= player 1)
(begin (draw-token c r red)
        (set! player 2)
        (vector-set! (list-ref board-state r) c 2))
(begin (draw-token c r yellow)
        (vector-set!
        (list-ref board-state r) c 1)
        (set! player 1)))
(if (= (check-four r c) 1)
(begin (set! game-end 1)
       (if (= player 2)
        (fill-text board (vector 82 69 68 32 87 79 78 33) 250 250)
        (fill-text board (vector 89 69 76 76 79 87 32 87 79 78 33) 250 250))
) (if (= n-tokens 42)
      (begin (set! game-end 1)
             (fill-text board (vector 68 82 65 87 33) 250 250))
        (begin))))

(define (continue-game x y)
    (let* ((c (quotient (ceiling x) 100))(r (quotient (ceiling y) 100)))
        (if (and (= (token-space-is-empty r c) 1)
                 (= (token-space-is-empty (+ r 1) c) 0))
        (put-token r c) (begin)))
        )




(define (click x y)
    (if (= game-end 1) (new-game)   (continue-game x y)))

(canvas-onclick board click)


(draw-board)




0000000: 0061 736d  ; WASM_BINARY_MAGIC
0000004: 0100 0000  ; WASM_BINARY_VERSION
; section "Type" (1)
0000008: 01                                        ; section code
0000009: 00                                        ; section size (guess)
000000a: 01                                        ; num types
; func type 0
000000b: 60                                        ; func
000000c: 02                                        ; num params
000000d: 7f                                        ; i32
000000e: 7f                                        ; i32
000000f: 01                                        ; num results
0000010: 7f                                        ; i32
0000009: 07                                        ; FIXUP section size
; section "Function" (3)
0000011: 03                                        ; section code
0000012: 00                                        ; section size (guess)
0000013: 01                                        ; num functions
0000014: 00                                        ; function 0 signature index
0000012: 02                                        ; FIXUP section size
; section "Export" (7)
0000015: 07                                        ; section code
0000016: 00                                        ; section size (guess)
0000017: 01                                        ; num exports
0000018: 03                                        ; string length
0000019: 6164 64                                  add  ; export name
000001c: 00                                        ; export kind
000001d: 00                                        ; export func index
0000016: 07                                        ; FIXUP section size
; section "Code" (10)
000001e: 0a                                        ; section code
000001f: 00                                        ; section size (guess)
0000020: 01                                        ; num functions
; function body 0
0000021: 00                                        ; func body size (guess)
0000022: 00                                        ; local decl count
0000023: 20                                        ; local.get
0000024: 00                                        ; local index
0000025: 20                                        ; local.get
0000026: 01                                        ; local index
0000027: 6a                                        ; i32.add
0000028: 0b                                        ; end
0000021: 07                                        ; FIXUP func body size
000001f: 09                                        ; FIXUP section size
; section "name"
0000029: 00                                        ; section code
000002a: 00                                        ; section size (guess)
000002b: 04                                        ; string length
000002c: 6e61 6d65                                name  ; custom section name
0000030: 02                                        ; local name type
0000031: 00                                        ; subsection size (guess)
0000032: 01                                        ; num functions
0000033: 00                                        ; function index
0000034: 00                                        ; num locals
0000031: 03                                        ; FIXUP subsection size
000002a: 0a                                        ; FIXUP section size


