// Generated from SchemeLikeL.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from './antlr4/index.web.js';
import SchemeLikeLListener from './SchemeLikeLListener.js';
import SchemeLikeLVisitor from './SchemeLikeLVisitor.js';

const serializedATN = [4,1,24,765,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,1,0,3,0,58,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
3,0,73,8,0,4,0,75,8,0,11,0,12,0,76,1,0,1,0,1,1,3,1,82,8,1,1,1,1,1,3,1,86,
8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,101,8,1,11,1,
12,1,102,1,1,3,1,106,8,1,1,1,1,1,3,1,110,8,1,1,2,3,2,113,8,2,1,2,1,2,3,2,
117,8,2,1,2,1,2,1,2,4,2,122,8,2,11,2,12,2,123,1,2,3,2,127,8,2,1,2,1,2,3,
2,131,8,2,1,3,3,3,134,8,3,1,3,1,3,3,3,138,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,153,8,3,1,3,3,3,156,8,3,1,3,1,3,3,3,160,8,
3,1,4,3,4,163,8,4,1,4,1,4,3,4,167,8,4,1,4,1,4,3,4,171,8,4,1,4,1,4,3,4,175,
8,4,1,4,1,4,1,4,5,4,180,8,4,10,4,12,4,183,9,4,1,4,3,4,186,8,4,1,4,1,4,1,
4,3,4,191,8,4,1,4,1,4,1,4,1,4,3,4,197,8,4,1,4,1,4,3,4,201,8,4,1,4,1,4,3,
4,205,8,4,1,4,1,4,3,4,209,8,4,1,4,3,4,212,8,4,1,4,1,4,5,4,216,8,4,10,4,12,
4,219,9,4,1,4,3,4,222,8,4,1,4,1,4,3,4,226,8,4,1,4,1,4,1,4,1,4,3,4,232,8,
4,1,5,3,5,235,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,5,5,251,8,5,10,5,12,5,254,9,5,1,5,3,5,257,8,5,1,6,3,6,260,8,6,1,6,1,6,
3,6,264,8,6,1,6,1,6,3,6,268,8,6,1,6,1,6,3,6,272,8,6,1,6,1,6,1,6,1,6,1,6,
3,6,279,8,6,5,6,281,8,6,10,6,12,6,284,9,6,1,6,1,6,3,6,288,8,6,1,6,1,6,3,
6,292,8,6,1,6,1,6,3,6,296,8,6,1,7,3,7,299,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
7,1,7,1,7,1,7,1,7,3,7,312,8,7,1,7,3,7,315,8,7,1,8,3,8,318,8,8,1,8,1,8,3,
8,322,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,338,
8,8,10,8,12,8,341,9,8,1,8,3,8,344,8,8,1,8,1,8,3,8,348,8,8,1,9,3,9,351,8,
9,1,9,1,9,3,9,355,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
9,3,9,370,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,384,8,
9,1,9,3,9,387,8,9,1,9,1,9,3,9,391,8,9,1,10,3,10,394,8,10,1,10,1,10,3,10,
398,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
3,10,413,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
3,10,427,8,10,1,10,3,10,430,8,10,1,10,1,10,3,10,434,8,10,1,11,3,11,437,8,
11,1,11,1,11,3,11,441,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
1,11,1,11,1,11,1,11,3,11,456,8,11,1,11,3,11,459,8,11,1,11,1,11,3,11,463,
8,11,1,12,3,12,466,8,12,1,12,1,12,3,12,470,8,12,1,12,1,12,1,12,1,12,1,12,
1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,485,8,12,1,12,3,12,488,8,12,
1,12,1,12,3,12,492,8,12,1,13,3,13,495,8,13,1,13,1,13,3,13,499,8,13,1,13,
1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,515,
8,13,10,13,12,13,518,9,13,1,13,3,13,521,8,13,1,13,1,13,3,13,525,8,13,1,14,
3,14,528,8,14,1,14,1,14,3,14,532,8,14,1,14,1,14,3,14,536,8,14,1,14,1,14,
3,14,540,8,14,1,14,3,14,543,8,14,1,14,1,14,5,14,547,8,14,10,14,12,14,550,
9,14,1,14,3,14,553,8,14,1,14,1,14,3,14,557,8,14,1,14,1,14,3,14,561,8,14,
1,14,3,14,564,8,14,4,14,566,8,14,11,14,12,14,567,1,14,1,14,3,14,572,8,14,
1,15,3,15,575,8,15,1,15,1,15,3,15,579,8,15,1,15,1,15,1,15,1,15,1,15,1,15,
1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,597,8,15,1,15,3,15,
600,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
1,15,3,15,616,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
1,15,1,15,1,15,3,15,632,8,15,1,15,3,15,635,8,15,1,15,1,15,3,15,639,8,15,
1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,3,22,654,
8,22,1,22,1,22,3,22,658,8,22,1,22,1,22,1,22,1,22,3,22,664,8,22,1,22,1,22,
3,22,668,8,22,1,23,3,23,671,8,23,1,23,1,23,3,23,675,8,23,1,23,1,23,1,23,
1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,688,8,23,10,23,12,23,691,9,
23,1,23,3,23,694,8,23,1,23,1,23,3,23,698,8,23,1,24,3,24,701,8,24,1,24,1,
24,3,24,705,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
1,24,1,24,5,24,720,8,24,10,24,12,24,723,9,24,1,24,3,24,726,8,24,1,24,1,24,
3,24,730,8,24,1,25,3,25,733,8,25,1,25,1,25,3,25,737,8,25,1,25,1,25,1,25,
1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,752,8,25,1,25,3,25,
755,8,25,1,25,1,25,3,25,759,8,25,1,26,1,26,1,27,1,27,1,27,0,0,28,0,2,4,6,
8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,0,
1,1,0,20,23,1024,0,74,1,0,0,0,2,81,1,0,0,0,4,112,1,0,0,0,6,133,1,0,0,0,8,
162,1,0,0,0,10,234,1,0,0,0,12,259,1,0,0,0,14,298,1,0,0,0,16,317,1,0,0,0,
18,350,1,0,0,0,20,393,1,0,0,0,22,436,1,0,0,0,24,465,1,0,0,0,26,494,1,0,0,
0,28,527,1,0,0,0,30,574,1,0,0,0,32,640,1,0,0,0,34,642,1,0,0,0,36,644,1,0,
0,0,38,646,1,0,0,0,40,648,1,0,0,0,42,650,1,0,0,0,44,653,1,0,0,0,46,670,1,
0,0,0,48,700,1,0,0,0,50,732,1,0,0,0,52,760,1,0,0,0,54,762,1,0,0,0,56,58,
5,19,0,0,57,56,1,0,0,0,57,58,1,0,0,0,58,72,1,0,0,0,59,73,3,2,1,0,60,73,3,
6,3,0,61,73,3,8,4,0,62,73,3,52,26,0,63,73,3,54,27,0,64,73,3,26,13,0,65,73,
3,44,22,0,66,73,3,48,24,0,67,73,3,46,23,0,68,73,3,50,25,0,69,73,3,22,11,
0,70,73,3,30,15,0,71,73,3,16,8,0,72,59,1,0,0,0,72,60,1,0,0,0,72,61,1,0,0,
0,72,62,1,0,0,0,72,63,1,0,0,0,72,64,1,0,0,0,72,65,1,0,0,0,72,66,1,0,0,0,
72,67,1,0,0,0,72,68,1,0,0,0,72,69,1,0,0,0,72,70,1,0,0,0,72,71,1,0,0,0,73,
75,1,0,0,0,74,57,1,0,0,0,75,76,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,78,
1,0,0,0,78,79,5,0,0,1,79,1,1,0,0,0,80,82,5,19,0,0,81,80,1,0,0,0,81,82,1,
0,0,0,82,83,1,0,0,0,83,85,5,17,0,0,84,86,5,19,0,0,85,84,1,0,0,0,85,86,1,
0,0,0,86,87,1,0,0,0,87,100,3,32,16,0,88,101,3,18,9,0,89,101,3,2,1,0,90,91,
5,19,0,0,91,101,3,52,26,0,92,93,5,19,0,0,93,101,3,54,27,0,94,101,3,26,13,
0,95,101,3,22,11,0,96,101,3,16,8,0,97,101,3,30,15,0,98,101,3,46,23,0,99,
101,3,48,24,0,100,88,1,0,0,0,100,89,1,0,0,0,100,90,1,0,0,0,100,92,1,0,0,
0,100,94,1,0,0,0,100,95,1,0,0,0,100,96,1,0,0,0,100,97,1,0,0,0,100,98,1,0,
0,0,100,99,1,0,0,0,101,102,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,105,
1,0,0,0,104,106,5,19,0,0,105,104,1,0,0,0,105,106,1,0,0,0,106,107,1,0,0,0,
107,109,5,18,0,0,108,110,5,19,0,0,109,108,1,0,0,0,109,110,1,0,0,0,110,3,
1,0,0,0,111,113,5,19,0,0,112,111,1,0,0,0,112,113,1,0,0,0,113,114,1,0,0,0,
114,116,5,17,0,0,115,117,5,19,0,0,116,115,1,0,0,0,116,117,1,0,0,0,117,118,
1,0,0,0,118,121,3,34,17,0,119,122,3,24,12,0,120,122,3,20,10,0,121,119,1,
0,0,0,121,120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,
126,1,0,0,0,125,127,5,19,0,0,126,125,1,0,0,0,126,127,1,0,0,0,127,128,1,0,
0,0,128,130,5,18,0,0,129,131,5,19,0,0,130,129,1,0,0,0,130,131,1,0,0,0,131,
5,1,0,0,0,132,134,5,19,0,0,133,132,1,0,0,0,133,134,1,0,0,0,134,135,1,0,0,
0,135,137,5,17,0,0,136,138,5,19,0,0,137,136,1,0,0,0,137,138,1,0,0,0,138,
139,1,0,0,0,139,140,5,1,0,0,140,141,5,19,0,0,141,152,3,54,27,0,142,143,5,
19,0,0,143,153,3,54,27,0,144,145,5,19,0,0,145,153,3,52,26,0,146,153,3,2,
1,0,147,153,3,26,13,0,148,153,3,46,23,0,149,153,3,48,24,0,150,153,3,22,11,
0,151,153,3,18,9,0,152,142,1,0,0,0,152,144,1,0,0,0,152,146,1,0,0,0,152,147,
1,0,0,0,152,148,1,0,0,0,152,149,1,0,0,0,152,150,1,0,0,0,152,151,1,0,0,0,
153,155,1,0,0,0,154,156,5,19,0,0,155,154,1,0,0,0,155,156,1,0,0,0,156,157,
1,0,0,0,157,159,5,18,0,0,158,160,5,19,0,0,159,158,1,0,0,0,159,160,1,0,0,
0,160,7,1,0,0,0,161,163,5,19,0,0,162,161,1,0,0,0,162,163,1,0,0,0,163,164,
1,0,0,0,164,166,5,17,0,0,165,167,5,19,0,0,166,165,1,0,0,0,166,167,1,0,0,
0,167,168,1,0,0,0,168,170,5,1,0,0,169,171,5,19,0,0,170,169,1,0,0,0,170,171,
1,0,0,0,171,231,1,0,0,0,172,174,5,17,0,0,173,175,5,19,0,0,174,173,1,0,0,
0,174,175,1,0,0,0,175,176,1,0,0,0,176,181,3,54,27,0,177,178,5,19,0,0,178,
180,3,54,27,0,179,177,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,
0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,184,186,5,19,0,0,185,184,1,0,0,0,185,
186,1,0,0,0,186,187,1,0,0,0,187,190,5,18,0,0,188,191,3,10,5,0,189,191,3,
12,6,0,190,188,1,0,0,0,190,189,1,0,0,0,191,192,1,0,0,0,192,193,5,18,0,0,
193,232,1,0,0,0,194,196,3,54,27,0,195,197,5,19,0,0,196,195,1,0,0,0,196,197,
1,0,0,0,197,198,1,0,0,0,198,200,5,17,0,0,199,201,5,19,0,0,200,199,1,0,0,
0,200,201,1,0,0,0,201,202,1,0,0,0,202,204,5,2,0,0,203,205,5,19,0,0,204,203,
1,0,0,0,204,205,1,0,0,0,205,206,1,0,0,0,206,208,5,17,0,0,207,209,5,19,0,
0,208,207,1,0,0,0,208,209,1,0,0,0,209,211,1,0,0,0,210,212,3,54,27,0,211,
210,1,0,0,0,211,212,1,0,0,0,212,217,1,0,0,0,213,214,5,19,0,0,214,216,3,54,
27,0,215,213,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,
221,1,0,0,0,219,217,1,0,0,0,220,222,5,19,0,0,221,220,1,0,0,0,221,222,1,0,
0,0,222,223,1,0,0,0,223,225,5,18,0,0,224,226,5,19,0,0,225,224,1,0,0,0,225,
226,1,0,0,0,226,227,1,0,0,0,227,228,3,10,5,0,228,229,5,18,0,0,229,230,5,
18,0,0,230,232,1,0,0,0,231,172,1,0,0,0,231,194,1,0,0,0,232,9,1,0,0,0,233,
235,5,19,0,0,234,233,1,0,0,0,234,235,1,0,0,0,235,252,1,0,0,0,236,251,3,2,
1,0,237,251,3,18,9,0,238,251,3,22,11,0,239,240,5,19,0,0,240,251,3,52,26,
0,241,242,5,19,0,0,242,251,3,54,27,0,243,251,3,26,13,0,244,251,3,30,15,0,
245,251,3,44,22,0,246,251,3,48,24,0,247,251,3,50,25,0,248,251,3,46,23,0,
249,251,3,16,8,0,250,236,1,0,0,0,250,237,1,0,0,0,250,238,1,0,0,0,250,239,
1,0,0,0,250,241,1,0,0,0,250,243,1,0,0,0,250,244,1,0,0,0,250,245,1,0,0,0,
250,246,1,0,0,0,250,247,1,0,0,0,250,248,1,0,0,0,250,249,1,0,0,0,251,254,
1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,
255,257,5,19,0,0,256,255,1,0,0,0,256,257,1,0,0,0,257,11,1,0,0,0,258,260,
5,19,0,0,259,258,1,0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,263,5,17,0,
0,262,264,5,19,0,0,263,262,1,0,0,0,263,264,1,0,0,0,264,265,1,0,0,0,265,267,
5,3,0,0,266,268,5,19,0,0,267,266,1,0,0,0,267,268,1,0,0,0,268,269,1,0,0,0,
269,271,5,17,0,0,270,272,5,19,0,0,271,270,1,0,0,0,271,272,1,0,0,0,272,282,
1,0,0,0,273,274,5,17,0,0,274,275,3,14,7,0,275,276,5,18,0,0,276,278,1,0,0,
0,277,279,5,19,0,0,278,277,1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,273,
1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,285,1,0,0,0,
284,282,1,0,0,0,285,287,5,18,0,0,286,288,5,19,0,0,287,286,1,0,0,0,287,288,
1,0,0,0,288,289,1,0,0,0,289,291,3,10,5,0,290,292,5,19,0,0,291,290,1,0,0,
0,291,292,1,0,0,0,292,293,1,0,0,0,293,295,5,18,0,0,294,296,5,19,0,0,295,
294,1,0,0,0,295,296,1,0,0,0,296,13,1,0,0,0,297,299,5,19,0,0,298,297,1,0,
0,0,298,299,1,0,0,0,299,300,1,0,0,0,300,311,3,54,27,0,301,312,3,2,1,0,302,
303,5,19,0,0,303,312,3,52,26,0,304,305,5,19,0,0,305,312,3,54,27,0,306,312,
3,26,13,0,307,312,3,46,23,0,308,312,3,48,24,0,309,312,3,22,11,0,310,312,
3,18,9,0,311,301,1,0,0,0,311,302,1,0,0,0,311,304,1,0,0,0,311,306,1,0,0,0,
311,307,1,0,0,0,311,308,1,0,0,0,311,309,1,0,0,0,311,310,1,0,0,0,312,314,
1,0,0,0,313,315,5,19,0,0,314,313,1,0,0,0,314,315,1,0,0,0,315,15,1,0,0,0,
316,318,5,19,0,0,317,316,1,0,0,0,317,318,1,0,0,0,318,319,1,0,0,0,319,321,
5,17,0,0,320,322,5,19,0,0,321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,
0,323,339,5,4,0,0,324,338,3,2,1,0,325,326,5,19,0,0,326,338,3,52,26,0,327,
328,5,19,0,0,328,338,3,54,27,0,329,338,3,26,13,0,330,338,3,44,22,0,331,338,
3,50,25,0,332,338,3,30,15,0,333,338,3,46,23,0,334,338,3,48,24,0,335,338,
3,22,11,0,336,338,3,18,9,0,337,324,1,0,0,0,337,325,1,0,0,0,337,327,1,0,0,
0,337,329,1,0,0,0,337,330,1,0,0,0,337,331,1,0,0,0,337,332,1,0,0,0,337,333,
1,0,0,0,337,334,1,0,0,0,337,335,1,0,0,0,337,336,1,0,0,0,338,341,1,0,0,0,
339,337,1,0,0,0,339,340,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,342,344,
5,19,0,0,343,342,1,0,0,0,343,344,1,0,0,0,344,345,1,0,0,0,345,347,5,18,0,
0,346,348,5,19,0,0,347,346,1,0,0,0,347,348,1,0,0,0,348,17,1,0,0,0,349,351,
5,19,0,0,350,349,1,0,0,0,350,351,1,0,0,0,351,352,1,0,0,0,352,354,5,17,0,
0,353,355,5,19,0,0,354,353,1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,369,
3,36,18,0,357,370,3,18,9,0,358,370,3,2,1,0,359,360,5,19,0,0,360,370,3,52,
26,0,361,362,5,19,0,0,362,370,3,54,27,0,363,370,3,26,13,0,364,370,3,22,11,
0,365,370,3,16,8,0,366,370,3,30,15,0,367,370,3,46,23,0,368,370,3,48,24,0,
369,357,1,0,0,0,369,358,1,0,0,0,369,359,1,0,0,0,369,361,1,0,0,0,369,363,
1,0,0,0,369,364,1,0,0,0,369,365,1,0,0,0,369,366,1,0,0,0,369,367,1,0,0,0,
369,368,1,0,0,0,370,383,1,0,0,0,371,384,3,18,9,0,372,384,3,2,1,0,373,374,
5,19,0,0,374,384,3,52,26,0,375,376,5,19,0,0,376,384,3,54,27,0,377,384,3,
26,13,0,378,384,3,22,11,0,379,384,3,16,8,0,380,384,3,30,15,0,381,384,3,46,
23,0,382,384,3,48,24,0,383,371,1,0,0,0,383,372,1,0,0,0,383,373,1,0,0,0,383,
375,1,0,0,0,383,377,1,0,0,0,383,378,1,0,0,0,383,379,1,0,0,0,383,380,1,0,
0,0,383,381,1,0,0,0,383,382,1,0,0,0,384,386,1,0,0,0,385,387,5,19,0,0,386,
385,1,0,0,0,386,387,1,0,0,0,387,388,1,0,0,0,388,390,5,18,0,0,389,391,5,19,
0,0,390,389,1,0,0,0,390,391,1,0,0,0,391,19,1,0,0,0,392,394,5,19,0,0,393,
392,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,397,5,17,0,0,396,398,5,19,
0,0,397,396,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,412,3,38,19,0,400,
413,3,18,9,0,401,413,3,2,1,0,402,403,5,19,0,0,403,413,3,52,26,0,404,405,
5,19,0,0,405,413,3,54,27,0,406,413,3,26,13,0,407,413,3,22,11,0,408,413,3,
16,8,0,409,413,3,30,15,0,410,413,3,46,23,0,411,413,3,48,24,0,412,400,1,0,
0,0,412,401,1,0,0,0,412,402,1,0,0,0,412,404,1,0,0,0,412,406,1,0,0,0,412,
407,1,0,0,0,412,408,1,0,0,0,412,409,1,0,0,0,412,410,1,0,0,0,412,411,1,0,
0,0,413,426,1,0,0,0,414,427,3,18,9,0,415,427,3,2,1,0,416,417,5,19,0,0,417,
427,3,52,26,0,418,419,5,19,0,0,419,427,3,54,27,0,420,427,3,26,13,0,421,427,
3,22,11,0,422,427,3,16,8,0,423,427,3,30,15,0,424,427,3,46,23,0,425,427,3,
48,24,0,426,414,1,0,0,0,426,415,1,0,0,0,426,416,1,0,0,0,426,418,1,0,0,0,
426,420,1,0,0,0,426,421,1,0,0,0,426,422,1,0,0,0,426,423,1,0,0,0,426,424,
1,0,0,0,426,425,1,0,0,0,427,429,1,0,0,0,428,430,5,19,0,0,429,428,1,0,0,0,
429,430,1,0,0,0,430,431,1,0,0,0,431,433,5,18,0,0,432,434,5,19,0,0,433,432,
1,0,0,0,433,434,1,0,0,0,434,21,1,0,0,0,435,437,5,19,0,0,436,435,1,0,0,0,
436,437,1,0,0,0,437,438,1,0,0,0,438,440,5,17,0,0,439,441,5,19,0,0,440,439,
1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,455,3,40,20,0,443,456,3,18,9,
0,444,456,3,2,1,0,445,446,5,19,0,0,446,456,3,52,26,0,447,448,5,19,0,0,448,
456,3,54,27,0,449,456,3,26,13,0,450,456,3,22,11,0,451,456,3,16,8,0,452,456,
3,30,15,0,453,456,3,46,23,0,454,456,3,48,24,0,455,443,1,0,0,0,455,444,1,
0,0,0,455,445,1,0,0,0,455,447,1,0,0,0,455,449,1,0,0,0,455,450,1,0,0,0,455,
451,1,0,0,0,455,452,1,0,0,0,455,453,1,0,0,0,455,454,1,0,0,0,456,458,1,0,
0,0,457,459,5,19,0,0,458,457,1,0,0,0,458,459,1,0,0,0,459,460,1,0,0,0,460,
462,5,18,0,0,461,463,5,19,0,0,462,461,1,0,0,0,462,463,1,0,0,0,463,23,1,0,
0,0,464,466,5,19,0,0,465,464,1,0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,
469,5,17,0,0,468,470,5,19,0,0,469,468,1,0,0,0,469,470,1,0,0,0,470,471,1,
0,0,0,471,484,3,42,21,0,472,485,3,18,9,0,473,485,3,2,1,0,474,475,5,19,0,
0,475,485,3,52,26,0,476,477,5,19,0,0,477,485,3,54,27,0,478,485,3,26,13,0,
479,485,3,22,11,0,480,485,3,16,8,0,481,485,3,30,15,0,482,485,3,46,23,0,483,
485,3,48,24,0,484,472,1,0,0,0,484,473,1,0,0,0,484,474,1,0,0,0,484,476,1,
0,0,0,484,478,1,0,0,0,484,479,1,0,0,0,484,480,1,0,0,0,484,481,1,0,0,0,484,
482,1,0,0,0,484,483,1,0,0,0,485,487,1,0,0,0,486,488,5,19,0,0,487,486,1,0,
0,0,487,488,1,0,0,0,488,489,1,0,0,0,489,491,5,18,0,0,490,492,5,19,0,0,491,
490,1,0,0,0,491,492,1,0,0,0,492,25,1,0,0,0,493,495,5,19,0,0,494,493,1,0,
0,0,494,495,1,0,0,0,495,496,1,0,0,0,496,498,5,17,0,0,497,499,5,19,0,0,498,
497,1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,516,3,54,27,0,501,515,3,
18,9,0,502,515,3,2,1,0,503,504,5,19,0,0,504,515,3,52,26,0,505,506,5,19,0,
0,506,515,3,54,27,0,507,515,3,26,13,0,508,515,3,22,11,0,509,515,3,16,8,0,
510,515,3,30,15,0,511,515,3,46,23,0,512,515,3,48,24,0,513,515,3,28,14,0,
514,501,1,0,0,0,514,502,1,0,0,0,514,503,1,0,0,0,514,505,1,0,0,0,514,507,
1,0,0,0,514,508,1,0,0,0,514,509,1,0,0,0,514,510,1,0,0,0,514,511,1,0,0,0,
514,512,1,0,0,0,514,513,1,0,0,0,515,518,1,0,0,0,516,514,1,0,0,0,516,517,
1,0,0,0,517,520,1,0,0,0,518,516,1,0,0,0,519,521,5,19,0,0,520,519,1,0,0,0,
520,521,1,0,0,0,521,522,1,0,0,0,522,524,5,18,0,0,523,525,5,19,0,0,524,523,
1,0,0,0,524,525,1,0,0,0,525,27,1,0,0,0,526,528,5,19,0,0,527,526,1,0,0,0,
527,528,1,0,0,0,528,529,1,0,0,0,529,531,5,17,0,0,530,532,5,19,0,0,531,530,
1,0,0,0,531,532,1,0,0,0,532,533,1,0,0,0,533,535,5,2,0,0,534,536,5,19,0,0,
535,534,1,0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,537,539,5,17,0,0,538,540,
5,19,0,0,539,538,1,0,0,0,539,540,1,0,0,0,540,542,1,0,0,0,541,543,3,54,27,
0,542,541,1,0,0,0,542,543,1,0,0,0,543,548,1,0,0,0,544,545,5,19,0,0,545,547,
3,54,27,0,546,544,1,0,0,0,547,550,1,0,0,0,548,546,1,0,0,0,548,549,1,0,0,
0,549,552,1,0,0,0,550,548,1,0,0,0,551,553,5,19,0,0,552,551,1,0,0,0,552,553,
1,0,0,0,553,554,1,0,0,0,554,556,5,18,0,0,555,557,5,19,0,0,556,555,1,0,0,
0,556,557,1,0,0,0,557,565,1,0,0,0,558,561,3,2,1,0,559,561,3,26,13,0,560,
558,1,0,0,0,560,559,1,0,0,0,561,563,1,0,0,0,562,564,5,19,0,0,563,562,1,0,
0,0,563,564,1,0,0,0,564,566,1,0,0,0,565,560,1,0,0,0,566,567,1,0,0,0,567,
565,1,0,0,0,567,568,1,0,0,0,568,569,1,0,0,0,569,571,5,18,0,0,570,572,5,19,
0,0,571,570,1,0,0,0,571,572,1,0,0,0,572,29,1,0,0,0,573,575,5,19,0,0,574,
573,1,0,0,0,574,575,1,0,0,0,575,576,1,0,0,0,576,578,5,17,0,0,577,579,5,19,
0,0,578,577,1,0,0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,596,5,5,0,0,581,
597,3,18,9,0,582,597,3,2,1,0,583,584,5,19,0,0,584,597,3,52,26,0,585,586,
5,19,0,0,586,597,3,54,27,0,587,597,3,26,13,0,588,597,3,22,11,0,589,597,3,
16,8,0,590,597,3,30,15,0,591,597,3,46,23,0,592,597,3,48,24,0,593,597,3,4,
2,0,594,597,3,20,10,0,595,597,3,24,12,0,596,581,1,0,0,0,596,582,1,0,0,0,
596,583,1,0,0,0,596,585,1,0,0,0,596,587,1,0,0,0,596,588,1,0,0,0,596,589,
1,0,0,0,596,590,1,0,0,0,596,591,1,0,0,0,596,592,1,0,0,0,596,593,1,0,0,0,
596,594,1,0,0,0,596,595,1,0,0,0,597,599,1,0,0,0,598,600,5,19,0,0,599,598,
1,0,0,0,599,600,1,0,0,0,600,615,1,0,0,0,601,616,3,18,9,0,602,616,3,2,1,0,
603,604,5,19,0,0,604,616,3,52,26,0,605,606,5,19,0,0,606,616,3,54,27,0,607,
616,3,26,13,0,608,616,3,22,11,0,609,616,3,16,8,0,610,616,3,30,15,0,611,616,
3,46,23,0,612,616,3,48,24,0,613,616,3,44,22,0,614,616,3,50,25,0,615,601,
1,0,0,0,615,602,1,0,0,0,615,603,1,0,0,0,615,605,1,0,0,0,615,607,1,0,0,0,
615,608,1,0,0,0,615,609,1,0,0,0,615,610,1,0,0,0,615,611,1,0,0,0,615,612,
1,0,0,0,615,613,1,0,0,0,615,614,1,0,0,0,616,631,1,0,0,0,617,632,3,18,9,0,
618,632,3,2,1,0,619,620,5,19,0,0,620,632,3,52,26,0,621,622,5,19,0,0,622,
632,3,54,27,0,623,632,3,26,13,0,624,632,3,22,11,0,625,632,3,16,8,0,626,632,
3,30,15,0,627,632,3,46,23,0,628,632,3,48,24,0,629,632,3,44,22,0,630,632,
3,50,25,0,631,617,1,0,0,0,631,618,1,0,0,0,631,619,1,0,0,0,631,621,1,0,0,
0,631,623,1,0,0,0,631,624,1,0,0,0,631,625,1,0,0,0,631,626,1,0,0,0,631,627,
1,0,0,0,631,628,1,0,0,0,631,629,1,0,0,0,631,630,1,0,0,0,631,632,1,0,0,0,
632,634,1,0,0,0,633,635,5,19,0,0,634,633,1,0,0,0,634,635,1,0,0,0,635,636,
1,0,0,0,636,638,5,18,0,0,637,639,5,19,0,0,638,637,1,0,0,0,638,639,1,0,0,
0,639,31,1,0,0,0,640,641,5,10,0,0,641,33,1,0,0,0,642,643,5,11,0,0,643,35,
1,0,0,0,644,645,5,12,0,0,645,37,1,0,0,0,646,647,5,13,0,0,647,39,1,0,0,0,
648,649,5,14,0,0,649,41,1,0,0,0,650,651,5,15,0,0,651,43,1,0,0,0,652,654,
5,19,0,0,653,652,1,0,0,0,653,654,1,0,0,0,654,655,1,0,0,0,655,657,5,17,0,
0,656,658,5,19,0,0,657,656,1,0,0,0,657,658,1,0,0,0,658,659,1,0,0,0,659,660,
5,6,0,0,660,661,5,19,0,0,661,663,3,14,7,0,662,664,5,19,0,0,663,662,1,0,0,
0,663,664,1,0,0,0,664,665,1,0,0,0,665,667,5,18,0,0,666,668,5,19,0,0,667,
666,1,0,0,0,667,668,1,0,0,0,668,45,1,0,0,0,669,671,5,19,0,0,670,669,1,0,
0,0,670,671,1,0,0,0,671,672,1,0,0,0,672,674,5,17,0,0,673,675,5,19,0,0,674,
673,1,0,0,0,674,675,1,0,0,0,675,676,1,0,0,0,676,689,5,7,0,0,677,688,3,18,
9,0,678,688,3,2,1,0,679,680,5,19,0,0,680,688,3,52,26,0,681,682,5,19,0,0,
682,688,3,54,27,0,683,688,3,26,13,0,684,688,3,22,11,0,685,688,3,16,8,0,686,
688,3,30,15,0,687,677,1,0,0,0,687,678,1,0,0,0,687,679,1,0,0,0,687,681,1,
0,0,0,687,683,1,0,0,0,687,684,1,0,0,0,687,685,1,0,0,0,687,686,1,0,0,0,688,
691,1,0,0,0,689,687,1,0,0,0,689,690,1,0,0,0,690,693,1,0,0,0,691,689,1,0,
0,0,692,694,5,19,0,0,693,692,1,0,0,0,693,694,1,0,0,0,694,695,1,0,0,0,695,
697,5,18,0,0,696,698,5,19,0,0,697,696,1,0,0,0,697,698,1,0,0,0,698,47,1,0,
0,0,699,701,5,19,0,0,700,699,1,0,0,0,700,701,1,0,0,0,701,702,1,0,0,0,702,
704,5,17,0,0,703,705,5,19,0,0,704,703,1,0,0,0,704,705,1,0,0,0,705,706,1,
0,0,0,706,721,5,8,0,0,707,720,3,18,9,0,708,720,3,2,1,0,709,710,5,19,0,0,
710,720,3,52,26,0,711,712,5,19,0,0,712,720,3,54,27,0,713,720,3,26,13,0,714,
720,3,22,11,0,715,720,3,16,8,0,716,720,3,30,15,0,717,720,3,46,23,0,718,720,
3,48,24,0,719,707,1,0,0,0,719,708,1,0,0,0,719,709,1,0,0,0,719,711,1,0,0,
0,719,713,1,0,0,0,719,714,1,0,0,0,719,715,1,0,0,0,719,716,1,0,0,0,719,717,
1,0,0,0,719,718,1,0,0,0,720,723,1,0,0,0,721,719,1,0,0,0,721,722,1,0,0,0,
722,725,1,0,0,0,723,721,1,0,0,0,724,726,5,19,0,0,725,724,1,0,0,0,725,726,
1,0,0,0,726,727,1,0,0,0,727,729,5,18,0,0,728,730,5,19,0,0,729,728,1,0,0,
0,729,730,1,0,0,0,730,49,1,0,0,0,731,733,5,19,0,0,732,731,1,0,0,0,732,733,
1,0,0,0,733,734,1,0,0,0,734,736,5,17,0,0,735,737,5,19,0,0,736,735,1,0,0,
0,736,737,1,0,0,0,737,738,1,0,0,0,738,751,5,9,0,0,739,752,3,18,9,0,740,752,
3,2,1,0,741,742,5,19,0,0,742,752,3,52,26,0,743,744,5,19,0,0,744,752,3,54,
27,0,745,752,3,26,13,0,746,752,3,22,11,0,747,752,3,16,8,0,748,752,3,30,15,
0,749,752,3,46,23,0,750,752,3,48,24,0,751,739,1,0,0,0,751,740,1,0,0,0,751,
741,1,0,0,0,751,743,1,0,0,0,751,745,1,0,0,0,751,746,1,0,0,0,751,747,1,0,
0,0,751,748,1,0,0,0,751,749,1,0,0,0,751,750,1,0,0,0,752,754,1,0,0,0,753,
755,5,19,0,0,754,753,1,0,0,0,754,755,1,0,0,0,755,756,1,0,0,0,756,758,5,18,
0,0,757,759,5,19,0,0,758,757,1,0,0,0,758,759,1,0,0,0,759,51,1,0,0,0,760,
761,7,0,0,0,761,53,1,0,0,0,762,763,5,16,0,0,763,55,1,0,0,0,127,57,72,76,
81,85,100,102,105,109,112,116,121,123,126,130,133,137,152,155,159,162,166,
170,174,181,185,190,196,200,204,208,211,217,221,225,231,234,250,252,256,
259,263,267,271,278,282,287,291,295,298,311,314,317,321,337,339,343,347,
350,354,369,383,386,390,393,397,412,426,429,433,436,440,455,458,462,465,
469,484,487,491,494,498,514,516,520,524,527,531,535,539,542,548,552,556,
560,563,567,571,574,578,596,599,615,631,634,638,653,657,663,667,670,674,
687,689,693,697,700,704,719,721,725,729,732,736,751,754,758];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class SchemeLikeLParser extends antlr4.Parser {

    static grammarFileName = "SchemeLikeL.g4";
    static literalNames = [ null, "'define'", "'lambda'", "'let'", "'begin'", 
                            "'if'", "'set!'", "'vector'", "'list'", "'display'", 
                            null, null, "'quotient'", null, null, "'null?'", 
                            null, "'('", "')'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, "OPERATOR", "LOGOPERATOR", "BIOPERATOR", 
                             "LOGBIOPERATOR", "UNIOPERATOR", "LOGUNIOPERATOR", 
                             "VARIABLE", "PSTART", "PEND", "SPACE", "FLOAT", 
                             "INT", "NFLOAT", "NINT", "WS" ];
    static ruleNames = [ "start", "expr", "logExpr", "defineGlobalVar", 
                         "defineFnc", "fncBodyExpr", "localFncBodyExpr", 
                         "varPairExpr", "beginExpr", "biExpr", "logBiExpr", 
                         "uniExpr", "logUniExpr", "callFnc", "callLambdaFnc", 
                         "ifExpr", "operatorExpr", "logOperatorExpr", "biOperatorExpr", 
                         "logBiOperatorExpr", "uniOperatorExpr", "logUniOperatorExpr", 
                         "setExpr", "vectorExpr", "listExpr", "displayExpr", 
                         "literal", "identifier" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SchemeLikeLParser.ruleNames;
        this.literalNames = SchemeLikeLParser.literalNames;
        this.symbolicNames = SchemeLikeLParser.symbolicNames;
    }



	start() {
	    let localctx = new StartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SchemeLikeLParser.RULE_start);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 74; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 57;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	            if(la_===1) {
	                this.state = 56;
	                this.match(SchemeLikeLParser.SPACE);

	            }
	            this.state = 72;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 59;
	                this.expr();
	                break;

	            case 2:
	                this.state = 60;
	                this.defineGlobalVar();
	                break;

	            case 3:
	                this.state = 61;
	                this.defineFnc();
	                break;

	            case 4:
	                this.state = 62;
	                this.literal();
	                break;

	            case 5:
	                this.state = 63;
	                this.identifier();
	                break;

	            case 6:
	                this.state = 64;
	                this.callFnc();
	                break;

	            case 7:
	                this.state = 65;
	                this.setExpr();
	                break;

	            case 8:
	                this.state = 66;
	                this.listExpr();
	                break;

	            case 9:
	                this.state = 67;
	                this.vectorExpr();
	                break;

	            case 10:
	                this.state = 68;
	                this.displayExpr();
	                break;

	            case 11:
	                this.state = 69;
	                this.uniExpr();
	                break;

	            case 12:
	                this.state = 70;
	                this.ifExpr();
	                break;

	            case 13:
	                this.state = 71;
	                this.beginExpr();
	                break;

	            }
	            this.state = 76; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 16449536) !== 0));
	        this.state = 78;
	        this.match(SchemeLikeLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SchemeLikeLParser.RULE_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 81;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 80;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 83;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 85;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 84;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 87;
	        this.operatorExpr();
	        this.state = 100; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 100;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        		switch(la_) {
	        		case 1:
	        		    this.state = 88;
	        		    this.biExpr();
	        		    break;

	        		case 2:
	        		    this.state = 89;
	        		    this.expr();
	        		    break;

	        		case 3:
	        		    this.state = 90;
	        		    this.match(SchemeLikeLParser.SPACE);
	        		    this.state = 91;
	        		    this.literal();
	        		    break;

	        		case 4:
	        		    this.state = 92;
	        		    this.match(SchemeLikeLParser.SPACE);
	        		    this.state = 93;
	        		    this.identifier();
	        		    break;

	        		case 5:
	        		    this.state = 94;
	        		    this.callFnc();
	        		    break;

	        		case 6:
	        		    this.state = 95;
	        		    this.uniExpr();
	        		    break;

	        		case 7:
	        		    this.state = 96;
	        		    this.beginExpr();
	        		    break;

	        		case 8:
	        		    this.state = 97;
	        		    this.ifExpr();
	        		    break;

	        		case 9:
	        		    this.state = 98;
	        		    this.vectorExpr();
	        		    break;

	        		case 10:
	        		    this.state = 99;
	        		    this.listExpr();
	        		    break;

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 102; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,6, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 105;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 104;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 107;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 109;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        if(la_===1) {
	            this.state = 108;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logExpr() {
	    let localctx = new LogExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SchemeLikeLParser.RULE_logExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 112;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 111;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 114;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 116;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 115;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 118;
	        this.logOperatorExpr();
	        this.state = 121; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 121;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        		switch(la_) {
	        		case 1:
	        		    this.state = 119;
	        		    this.logUniExpr();
	        		    break;

	        		case 2:
	        		    this.state = 120;
	        		    this.logBiExpr();
	        		    break;

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 123; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,12, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 126;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 125;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 128;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 130;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        if(la_===1) {
	            this.state = 129;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defineGlobalVar() {
	    let localctx = new DefineGlobalVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SchemeLikeLParser.RULE_defineGlobalVar);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 133;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 132;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 135;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 137;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 136;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 139;
	        this.match(SchemeLikeLParser.T__0);
	        this.state = 140;
	        this.match(SchemeLikeLParser.SPACE);
	        this.state = 141;
	        this.identifier();
	        this.state = 152;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 142;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 143;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 144;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 145;
	            this.literal();
	            break;

	        case 3:
	            this.state = 146;
	            this.expr();
	            break;

	        case 4:
	            this.state = 147;
	            this.callFnc();
	            break;

	        case 5:
	            this.state = 148;
	            this.vectorExpr();
	            break;

	        case 6:
	            this.state = 149;
	            this.listExpr();
	            break;

	        case 7:
	            this.state = 150;
	            this.uniExpr();
	            break;

	        case 8:
	            this.state = 151;
	            this.biExpr();
	            break;

	        }
	        this.state = 155;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 154;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 157;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 159;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        if(la_===1) {
	            this.state = 158;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defineFnc() {
	    let localctx = new DefineFncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SchemeLikeLParser.RULE_defineFnc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 162;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 161;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 164;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 166;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 165;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 168;
	        this.match(SchemeLikeLParser.T__0);
	        this.state = 170;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 169;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 231;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 17:
	            this.state = 172;
	            this.match(SchemeLikeLParser.PSTART);
	            this.state = 174;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 173;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 176;
	            this.identifier();
	            this.state = 181;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 177;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 178;
	                    this.identifier(); 
	                }
	                this.state = 183;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
	            }

	            this.state = 185;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 184;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 187;
	            this.match(SchemeLikeLParser.PEND);
	            this.state = 190;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 188;
	                this.fncBodyExpr();
	                break;

	            case 2:
	                this.state = 189;
	                this.localFncBodyExpr();
	                break;

	            }
	            this.state = 192;
	            this.match(SchemeLikeLParser.PEND);
	            break;
	        case 16:
	            this.state = 194;
	            this.identifier();
	            this.state = 196;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 195;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 198;
	            this.match(SchemeLikeLParser.PSTART);
	            this.state = 200;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 199;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 202;
	            this.match(SchemeLikeLParser.T__1);
	            this.state = 204;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 203;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 206;
	            this.match(SchemeLikeLParser.PSTART);
	            this.state = 208;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	            if(la_===1) {
	                this.state = 207;
	                this.match(SchemeLikeLParser.SPACE);

	            }
	            this.state = 211;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 210;
	                this.identifier();
	            }

	            this.state = 217;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,32,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 213;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 214;
	                    this.identifier(); 
	                }
	                this.state = 219;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,32,this._ctx);
	            }

	            this.state = 221;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 220;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 223;
	            this.match(SchemeLikeLParser.PEND);
	            this.state = 225;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	            if(la_===1) {
	                this.state = 224;
	                this.match(SchemeLikeLParser.SPACE);

	            }
	            this.state = 227;
	            this.fncBodyExpr();
	            this.state = 228;
	            this.match(SchemeLikeLParser.PEND);
	            this.state = 229;
	            this.match(SchemeLikeLParser.PEND);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fncBodyExpr() {
	    let localctx = new FncBodyExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SchemeLikeLParser.RULE_fncBodyExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 234;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        if(la_===1) {
	            this.state = 233;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	        this.state = 252;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,38,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 250;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 236;
	                    this.expr();
	                    break;

	                case 2:
	                    this.state = 237;
	                    this.biExpr();
	                    break;

	                case 3:
	                    this.state = 238;
	                    this.uniExpr();
	                    break;

	                case 4:
	                    this.state = 239;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 240;
	                    this.literal();
	                    break;

	                case 5:
	                    this.state = 241;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 242;
	                    this.identifier();
	                    break;

	                case 6:
	                    this.state = 243;
	                    this.callFnc();
	                    break;

	                case 7:
	                    this.state = 244;
	                    this.ifExpr();
	                    break;

	                case 8:
	                    this.state = 245;
	                    this.setExpr();
	                    break;

	                case 9:
	                    this.state = 246;
	                    this.listExpr();
	                    break;

	                case 10:
	                    this.state = 247;
	                    this.displayExpr();
	                    break;

	                case 11:
	                    this.state = 248;
	                    this.vectorExpr();
	                    break;

	                case 12:
	                    this.state = 249;
	                    this.beginExpr();
	                    break;

	                } 
	            }
	            this.state = 254;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,38,this._ctx);
	        }

	        this.state = 256;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        if(la_===1) {
	            this.state = 255;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localFncBodyExpr() {
	    let localctx = new LocalFncBodyExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SchemeLikeLParser.RULE_localFncBodyExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 259;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 258;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 261;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 263;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 262;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 265;
	        this.match(SchemeLikeLParser.T__2);
	        this.state = 267;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 266;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 269;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 271;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 270;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 282;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===17) {
	            this.state = 273;
	            this.match(SchemeLikeLParser.PSTART);
	            this.state = 274;
	            this.varPairExpr();
	            this.state = 275;
	            this.match(SchemeLikeLParser.PEND);
	            this.state = 278;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 277;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 284;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 285;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 287;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        if(la_===1) {
	            this.state = 286;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	        this.state = 289;
	        this.fncBodyExpr();
	        this.state = 291;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 290;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 293;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 295;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 294;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varPairExpr() {
	    let localctx = new VarPairExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SchemeLikeLParser.RULE_varPairExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 298;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 297;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 300;
	        this.identifier();
	        this.state = 311;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 301;
	            this.expr();
	            break;

	        case 2:
	            this.state = 302;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 303;
	            this.literal();
	            break;

	        case 3:
	            this.state = 304;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 305;
	            this.identifier();
	            break;

	        case 4:
	            this.state = 306;
	            this.callFnc();
	            break;

	        case 5:
	            this.state = 307;
	            this.vectorExpr();
	            break;

	        case 6:
	            this.state = 308;
	            this.listExpr();
	            break;

	        case 7:
	            this.state = 309;
	            this.uniExpr();
	            break;

	        case 8:
	            this.state = 310;
	            this.biExpr();
	            break;

	        }
	        this.state = 314;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        if(la_===1) {
	            this.state = 313;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	beginExpr() {
	    let localctx = new BeginExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SchemeLikeLParser.RULE_beginExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 317;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 316;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 319;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 321;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 320;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 323;
	        this.match(SchemeLikeLParser.T__3);
	        this.state = 339;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 337;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 324;
	                    this.expr();
	                    break;

	                case 2:
	                    this.state = 325;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 326;
	                    this.literal();
	                    break;

	                case 3:
	                    this.state = 327;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 328;
	                    this.identifier();
	                    break;

	                case 4:
	                    this.state = 329;
	                    this.callFnc();
	                    break;

	                case 5:
	                    this.state = 330;
	                    this.setExpr();
	                    break;

	                case 6:
	                    this.state = 331;
	                    this.displayExpr();
	                    break;

	                case 7:
	                    this.state = 332;
	                    this.ifExpr();
	                    break;

	                case 8:
	                    this.state = 333;
	                    this.vectorExpr();
	                    break;

	                case 9:
	                    this.state = 334;
	                    this.listExpr();
	                    break;

	                case 10:
	                    this.state = 335;
	                    this.uniExpr();
	                    break;

	                case 11:
	                    this.state = 336;
	                    this.biExpr();
	                    break;

	                } 
	            }
	            this.state = 341;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
	        }

	        this.state = 343;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 342;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 345;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 347;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        if(la_===1) {
	            this.state = 346;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	biExpr() {
	    let localctx = new BiExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SchemeLikeLParser.RULE_biExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 350;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 349;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 352;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 354;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 353;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 356;
	        this.biOperatorExpr();
	        this.state = 369;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 357;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 358;
	            this.expr();
	            break;

	        case 3:
	            this.state = 359;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 360;
	            this.literal();
	            break;

	        case 4:
	            this.state = 361;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 362;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 363;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 364;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 365;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 366;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 367;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 368;
	            this.listExpr();
	            break;

	        }
	        this.state = 383;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 371;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 372;
	            this.expr();
	            break;

	        case 3:
	            this.state = 373;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 374;
	            this.literal();
	            break;

	        case 4:
	            this.state = 375;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 376;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 377;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 378;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 379;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 380;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 381;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 382;
	            this.listExpr();
	            break;

	        }
	        this.state = 386;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 385;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 388;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 390;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        if(la_===1) {
	            this.state = 389;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logBiExpr() {
	    let localctx = new LogBiExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SchemeLikeLParser.RULE_logBiExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 393;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 392;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 395;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 397;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 396;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 399;
	        this.logBiOperatorExpr();
	        this.state = 412;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 400;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 401;
	            this.expr();
	            break;

	        case 3:
	            this.state = 402;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 403;
	            this.literal();
	            break;

	        case 4:
	            this.state = 404;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 405;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 406;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 407;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 408;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 409;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 410;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 411;
	            this.listExpr();
	            break;

	        }
	        this.state = 426;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 414;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 415;
	            this.expr();
	            break;

	        case 3:
	            this.state = 416;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 417;
	            this.literal();
	            break;

	        case 4:
	            this.state = 418;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 419;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 420;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 421;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 422;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 423;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 424;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 425;
	            this.listExpr();
	            break;

	        }
	        this.state = 429;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 428;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 431;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 433;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        if(la_===1) {
	            this.state = 432;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniExpr() {
	    let localctx = new UniExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SchemeLikeLParser.RULE_uniExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 436;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 435;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 438;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 440;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 439;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 442;
	        this.uniOperatorExpr();
	        this.state = 455;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 443;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 444;
	            this.expr();
	            break;

	        case 3:
	            this.state = 445;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 446;
	            this.literal();
	            break;

	        case 4:
	            this.state = 447;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 448;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 449;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 450;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 451;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 452;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 453;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 454;
	            this.listExpr();
	            break;

	        }
	        this.state = 458;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 457;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 460;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 462;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        if(la_===1) {
	            this.state = 461;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logUniExpr() {
	    let localctx = new LogUniExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SchemeLikeLParser.RULE_logUniExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 465;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 464;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 467;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 469;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 468;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 471;
	        this.logUniOperatorExpr();
	        this.state = 484;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 472;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 473;
	            this.expr();
	            break;

	        case 3:
	            this.state = 474;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 475;
	            this.literal();
	            break;

	        case 4:
	            this.state = 476;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 477;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 478;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 479;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 480;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 481;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 482;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 483;
	            this.listExpr();
	            break;

	        }
	        this.state = 487;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 486;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 489;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 491;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        if(la_===1) {
	            this.state = 490;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callFnc() {
	    let localctx = new CallFncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SchemeLikeLParser.RULE_callFnc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 494;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 493;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 496;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 498;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 497;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 500;
	        this.identifier();
	        this.state = 516;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 514;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 501;
	                    this.biExpr();
	                    break;

	                case 2:
	                    this.state = 502;
	                    this.expr();
	                    break;

	                case 3:
	                    this.state = 503;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 504;
	                    this.literal();
	                    break;

	                case 4:
	                    this.state = 505;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 506;
	                    this.identifier();
	                    break;

	                case 5:
	                    this.state = 507;
	                    this.callFnc();
	                    break;

	                case 6:
	                    this.state = 508;
	                    this.uniExpr();
	                    break;

	                case 7:
	                    this.state = 509;
	                    this.beginExpr();
	                    break;

	                case 8:
	                    this.state = 510;
	                    this.ifExpr();
	                    break;

	                case 9:
	                    this.state = 511;
	                    this.vectorExpr();
	                    break;

	                case 10:
	                    this.state = 512;
	                    this.listExpr();
	                    break;

	                case 11:
	                    this.state = 513;
	                    this.callLambdaFnc();
	                    break;

	                } 
	            }
	            this.state = 518;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
	        }

	        this.state = 520;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 519;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 522;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 524;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        if(la_===1) {
	            this.state = 523;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callLambdaFnc() {
	    let localctx = new CallLambdaFncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SchemeLikeLParser.RULE_callLambdaFnc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 527;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 526;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 529;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 531;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 530;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 533;
	        this.match(SchemeLikeLParser.T__1);
	        this.state = 535;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 534;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 537;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 539;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        if(la_===1) {
	            this.state = 538;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	        this.state = 542;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===16) {
	            this.state = 541;
	            this.identifier();
	        }

	        this.state = 548;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 544;
	                this.match(SchemeLikeLParser.SPACE);
	                this.state = 545;
	                this.identifier(); 
	            }
	            this.state = 550;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
	        }

	        this.state = 552;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 551;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 554;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 556;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        if(la_===1) {
	            this.state = 555;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	        this.state = 565; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 560;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 558;
	                this.expr();
	                break;

	            case 2:
	                this.state = 559;
	                this.callFnc();
	                break;

	            }
	            this.state = 563;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	            if(la_===1) {
	                this.state = 562;
	                this.match(SchemeLikeLParser.SPACE);

	            }
	            this.state = 567; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===17 || _la===19);
	        this.state = 569;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 571;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	        if(la_===1) {
	            this.state = 570;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifExpr() {
	    let localctx = new IfExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SchemeLikeLParser.RULE_ifExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 574;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 573;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 576;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 577;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 580;
	        this.match(SchemeLikeLParser.T__4);
	        this.state = 596;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 581;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 582;
	            this.expr();
	            break;

	        case 3:
	            this.state = 583;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 584;
	            this.literal();
	            break;

	        case 4:
	            this.state = 585;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 586;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 587;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 588;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 589;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 590;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 591;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 592;
	            this.listExpr();
	            break;

	        case 11:
	            this.state = 593;
	            this.logExpr();
	            break;

	        case 12:
	            this.state = 594;
	            this.logBiExpr();
	            break;

	        case 13:
	            this.state = 595;
	            this.logUniExpr();
	            break;

	        }
	        this.state = 599;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        if(la_===1) {
	            this.state = 598;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	        this.state = 615;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 601;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 602;
	            this.expr();
	            break;

	        case 3:
	            this.state = 603;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 604;
	            this.literal();
	            break;

	        case 4:
	            this.state = 605;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 606;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 607;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 608;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 609;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 610;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 611;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 612;
	            this.listExpr();
	            break;

	        case 11:
	            this.state = 613;
	            this.setExpr();
	            break;

	        case 12:
	            this.state = 614;
	            this.displayExpr();
	            break;

	        }
	        this.state = 631;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        if(la_===1) {
	            this.state = 617;
	            this.biExpr();

	        } else if(la_===2) {
	            this.state = 618;
	            this.expr();

	        } else if(la_===3) {
	            this.state = 619;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 620;
	            this.literal();

	        } else if(la_===4) {
	            this.state = 621;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 622;
	            this.identifier();

	        } else if(la_===5) {
	            this.state = 623;
	            this.callFnc();

	        } else if(la_===6) {
	            this.state = 624;
	            this.uniExpr();

	        } else if(la_===7) {
	            this.state = 625;
	            this.beginExpr();

	        } else if(la_===8) {
	            this.state = 626;
	            this.ifExpr();

	        } else if(la_===9) {
	            this.state = 627;
	            this.vectorExpr();

	        } else if(la_===10) {
	            this.state = 628;
	            this.listExpr();

	        } else if(la_===11) {
	            this.state = 629;
	            this.setExpr();

	        } else if(la_===12) {
	            this.state = 630;
	            this.displayExpr();

	        }
	        this.state = 634;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 633;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 636;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 638;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        if(la_===1) {
	            this.state = 637;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operatorExpr() {
	    let localctx = new OperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SchemeLikeLParser.RULE_operatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 640;
	        this.match(SchemeLikeLParser.OPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logOperatorExpr() {
	    let localctx = new LogOperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SchemeLikeLParser.RULE_logOperatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 642;
	        this.match(SchemeLikeLParser.LOGOPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	biOperatorExpr() {
	    let localctx = new BiOperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SchemeLikeLParser.RULE_biOperatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 644;
	        this.match(SchemeLikeLParser.BIOPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logBiOperatorExpr() {
	    let localctx = new LogBiOperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SchemeLikeLParser.RULE_logBiOperatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 646;
	        this.match(SchemeLikeLParser.LOGBIOPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniOperatorExpr() {
	    let localctx = new UniOperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SchemeLikeLParser.RULE_uniOperatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 648;
	        this.match(SchemeLikeLParser.UNIOPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logUniOperatorExpr() {
	    let localctx = new LogUniOperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SchemeLikeLParser.RULE_logUniOperatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 650;
	        this.match(SchemeLikeLParser.LOGUNIOPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setExpr() {
	    let localctx = new SetExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SchemeLikeLParser.RULE_setExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 653;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 652;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 655;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 656;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 659;
	        this.match(SchemeLikeLParser.T__5);
	        this.state = 660;
	        this.match(SchemeLikeLParser.SPACE);
	        this.state = 661;
	        this.varPairExpr();
	        this.state = 663;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 662;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 665;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 667;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        if(la_===1) {
	            this.state = 666;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vectorExpr() {
	    let localctx = new VectorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SchemeLikeLParser.RULE_vectorExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 670;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 669;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 672;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 674;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 673;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 676;
	        this.match(SchemeLikeLParser.T__6);
	        this.state = 689;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,113,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 687;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 677;
	                    this.biExpr();
	                    break;

	                case 2:
	                    this.state = 678;
	                    this.expr();
	                    break;

	                case 3:
	                    this.state = 679;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 680;
	                    this.literal();
	                    break;

	                case 4:
	                    this.state = 681;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 682;
	                    this.identifier();
	                    break;

	                case 5:
	                    this.state = 683;
	                    this.callFnc();
	                    break;

	                case 6:
	                    this.state = 684;
	                    this.uniExpr();
	                    break;

	                case 7:
	                    this.state = 685;
	                    this.beginExpr();
	                    break;

	                case 8:
	                    this.state = 686;
	                    this.ifExpr();
	                    break;

	                } 
	            }
	            this.state = 691;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,113,this._ctx);
	        }

	        this.state = 693;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 692;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 695;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 697;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        if(la_===1) {
	            this.state = 696;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listExpr() {
	    let localctx = new ListExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SchemeLikeLParser.RULE_listExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 700;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 699;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 702;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 704;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 703;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 706;
	        this.match(SchemeLikeLParser.T__7);
	        this.state = 721;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 719;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 707;
	                    this.biExpr();
	                    break;

	                case 2:
	                    this.state = 708;
	                    this.expr();
	                    break;

	                case 3:
	                    this.state = 709;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 710;
	                    this.literal();
	                    break;

	                case 4:
	                    this.state = 711;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 712;
	                    this.identifier();
	                    break;

	                case 5:
	                    this.state = 713;
	                    this.callFnc();
	                    break;

	                case 6:
	                    this.state = 714;
	                    this.uniExpr();
	                    break;

	                case 7:
	                    this.state = 715;
	                    this.beginExpr();
	                    break;

	                case 8:
	                    this.state = 716;
	                    this.ifExpr();
	                    break;

	                case 9:
	                    this.state = 717;
	                    this.vectorExpr();
	                    break;

	                case 10:
	                    this.state = 718;
	                    this.listExpr();
	                    break;

	                } 
	            }
	            this.state = 723;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
	        }

	        this.state = 725;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 724;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 727;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 729;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        if(la_===1) {
	            this.state = 728;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	displayExpr() {
	    let localctx = new DisplayExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SchemeLikeLParser.RULE_displayExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 732;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 731;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 734;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 736;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 735;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 738;
	        this.match(SchemeLikeLParser.T__8);
	        this.state = 751;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 739;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 740;
	            this.expr();
	            break;

	        case 3:
	            this.state = 741;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 742;
	            this.literal();
	            break;

	        case 4:
	            this.state = 743;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 744;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 745;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 746;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 747;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 748;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 749;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 750;
	            this.listExpr();
	            break;

	        }
	        this.state = 754;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 753;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 756;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 758;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        if(la_===1) {
	            this.state = 757;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SchemeLikeLParser.RULE_literal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 760;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 15728640) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SchemeLikeLParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 762;
	        this.match(SchemeLikeLParser.VARIABLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SchemeLikeLParser.EOF = antlr4.Token.EOF;
SchemeLikeLParser.T__0 = 1;
SchemeLikeLParser.T__1 = 2;
SchemeLikeLParser.T__2 = 3;
SchemeLikeLParser.T__3 = 4;
SchemeLikeLParser.T__4 = 5;
SchemeLikeLParser.T__5 = 6;
SchemeLikeLParser.T__6 = 7;
SchemeLikeLParser.T__7 = 8;
SchemeLikeLParser.T__8 = 9;
SchemeLikeLParser.OPERATOR = 10;
SchemeLikeLParser.LOGOPERATOR = 11;
SchemeLikeLParser.BIOPERATOR = 12;
SchemeLikeLParser.LOGBIOPERATOR = 13;
SchemeLikeLParser.UNIOPERATOR = 14;
SchemeLikeLParser.LOGUNIOPERATOR = 15;
SchemeLikeLParser.VARIABLE = 16;
SchemeLikeLParser.PSTART = 17;
SchemeLikeLParser.PEND = 18;
SchemeLikeLParser.SPACE = 19;
SchemeLikeLParser.FLOAT = 20;
SchemeLikeLParser.INT = 21;
SchemeLikeLParser.NFLOAT = 22;
SchemeLikeLParser.NINT = 23;
SchemeLikeLParser.WS = 24;

SchemeLikeLParser.RULE_start = 0;
SchemeLikeLParser.RULE_expr = 1;
SchemeLikeLParser.RULE_logExpr = 2;
SchemeLikeLParser.RULE_defineGlobalVar = 3;
SchemeLikeLParser.RULE_defineFnc = 4;
SchemeLikeLParser.RULE_fncBodyExpr = 5;
SchemeLikeLParser.RULE_localFncBodyExpr = 6;
SchemeLikeLParser.RULE_varPairExpr = 7;
SchemeLikeLParser.RULE_beginExpr = 8;
SchemeLikeLParser.RULE_biExpr = 9;
SchemeLikeLParser.RULE_logBiExpr = 10;
SchemeLikeLParser.RULE_uniExpr = 11;
SchemeLikeLParser.RULE_logUniExpr = 12;
SchemeLikeLParser.RULE_callFnc = 13;
SchemeLikeLParser.RULE_callLambdaFnc = 14;
SchemeLikeLParser.RULE_ifExpr = 15;
SchemeLikeLParser.RULE_operatorExpr = 16;
SchemeLikeLParser.RULE_logOperatorExpr = 17;
SchemeLikeLParser.RULE_biOperatorExpr = 18;
SchemeLikeLParser.RULE_logBiOperatorExpr = 19;
SchemeLikeLParser.RULE_uniOperatorExpr = 20;
SchemeLikeLParser.RULE_logUniOperatorExpr = 21;
SchemeLikeLParser.RULE_setExpr = 22;
SchemeLikeLParser.RULE_vectorExpr = 23;
SchemeLikeLParser.RULE_listExpr = 24;
SchemeLikeLParser.RULE_displayExpr = 25;
SchemeLikeLParser.RULE_literal = 26;
SchemeLikeLParser.RULE_identifier = 27;

class StartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_start;
    }

	EOF() {
	    return this.getToken(SchemeLikeLParser.EOF, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	defineGlobalVar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefineGlobalVarContext);
	    } else {
	        return this.getTypedRuleContext(DefineGlobalVarContext,i);
	    }
	};

	defineFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefineFncContext);
	    } else {
	        return this.getTypedRuleContext(DefineFncContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	setExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetExprContext);
	    } else {
	        return this.getTypedRuleContext(SetExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	displayExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisplayExprContext);
	    } else {
	        return this.getTypedRuleContext(DisplayExprContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitStart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitStart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_expr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	operatorExpr() {
	    return this.getTypedRuleContext(OperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	logOperatorExpr() {
	    return this.getTypedRuleContext(LogOperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	logUniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogUniExprContext);
	    } else {
	        return this.getTypedRuleContext(LogUniExprContext,i);
	    }
	};

	logBiExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogBiExprContext);
	    } else {
	        return this.getTypedRuleContext(LogBiExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefineGlobalVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_defineGlobalVar;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	callFnc() {
	    return this.getTypedRuleContext(CallFncContext,0);
	};

	vectorExpr() {
	    return this.getTypedRuleContext(VectorExprContext,0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	uniExpr() {
	    return this.getTypedRuleContext(UniExprContext,0);
	};

	biExpr() {
	    return this.getTypedRuleContext(BiExprContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterDefineGlobalVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitDefineGlobalVar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitDefineGlobalVar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefineFncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_defineFnc;
    }

	PSTART = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PSTART);
	    } else {
	        return this.getToken(SchemeLikeLParser.PSTART, i);
	    }
	};


	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	PEND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PEND);
	    } else {
	        return this.getToken(SchemeLikeLParser.PEND, i);
	    }
	};


	fncBodyExpr() {
	    return this.getTypedRuleContext(FncBodyExprContext,0);
	};

	localFncBodyExpr() {
	    return this.getTypedRuleContext(LocalFncBodyExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterDefineFnc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitDefineFnc(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitDefineFnc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FncBodyExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_fncBodyExpr;
    }

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	setExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetExprContext);
	    } else {
	        return this.getTypedRuleContext(SetExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	displayExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisplayExprContext);
	    } else {
	        return this.getTypedRuleContext(DisplayExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterFncBodyExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitFncBodyExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitFncBodyExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalFncBodyExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_localFncBodyExpr;
    }

	PSTART = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PSTART);
	    } else {
	        return this.getToken(SchemeLikeLParser.PSTART, i);
	    }
	};


	PEND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PEND);
	    } else {
	        return this.getToken(SchemeLikeLParser.PEND, i);
	    }
	};


	fncBodyExpr() {
	    return this.getTypedRuleContext(FncBodyExprContext,0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	varPairExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VarPairExprContext);
	    } else {
	        return this.getTypedRuleContext(VarPairExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLocalFncBodyExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLocalFncBodyExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLocalFncBodyExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarPairExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_varPairExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	callFnc() {
	    return this.getTypedRuleContext(CallFncContext,0);
	};

	vectorExpr() {
	    return this.getTypedRuleContext(VectorExprContext,0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	uniExpr() {
	    return this.getTypedRuleContext(UniExprContext,0);
	};

	biExpr() {
	    return this.getTypedRuleContext(BiExprContext,0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterVarPairExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitVarPairExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitVarPairExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BeginExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_beginExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	setExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetExprContext);
	    } else {
	        return this.getTypedRuleContext(SetExprContext,i);
	    }
	};

	displayExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisplayExprContext);
	    } else {
	        return this.getTypedRuleContext(DisplayExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterBeginExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitBeginExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitBeginExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BiExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_biExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	biOperatorExpr() {
	    return this.getTypedRuleContext(BiOperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterBiExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitBiExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitBiExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogBiExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logBiExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	logBiOperatorExpr() {
	    return this.getTypedRuleContext(LogBiOperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogBiExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogBiExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogBiExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UniExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_uniExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	uniOperatorExpr() {
	    return this.getTypedRuleContext(UniOperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr() {
	    return this.getTypedRuleContext(BiExprContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	callFnc() {
	    return this.getTypedRuleContext(CallFncContext,0);
	};

	uniExpr() {
	    return this.getTypedRuleContext(UniExprContext,0);
	};

	beginExpr() {
	    return this.getTypedRuleContext(BeginExprContext,0);
	};

	ifExpr() {
	    return this.getTypedRuleContext(IfExprContext,0);
	};

	vectorExpr() {
	    return this.getTypedRuleContext(VectorExprContext,0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterUniExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitUniExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitUniExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogUniExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logUniExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	logUniOperatorExpr() {
	    return this.getTypedRuleContext(LogUniOperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr() {
	    return this.getTypedRuleContext(BiExprContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	callFnc() {
	    return this.getTypedRuleContext(CallFncContext,0);
	};

	uniExpr() {
	    return this.getTypedRuleContext(UniExprContext,0);
	};

	beginExpr() {
	    return this.getTypedRuleContext(BeginExprContext,0);
	};

	ifExpr() {
	    return this.getTypedRuleContext(IfExprContext,0);
	};

	vectorExpr() {
	    return this.getTypedRuleContext(VectorExprContext,0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogUniExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogUniExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogUniExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CallFncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_callFnc;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	callLambdaFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallLambdaFncContext);
	    } else {
	        return this.getTypedRuleContext(CallLambdaFncContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterCallFnc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitCallFnc(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitCallFnc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CallLambdaFncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_callLambdaFnc;
    }

	PSTART = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PSTART);
	    } else {
	        return this.getToken(SchemeLikeLParser.PSTART, i);
	    }
	};


	PEND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PEND);
	    } else {
	        return this.getToken(SchemeLikeLParser.PEND, i);
	    }
	};


	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterCallLambdaFnc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitCallLambdaFnc(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitCallLambdaFnc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_ifExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	logExpr() {
	    return this.getTypedRuleContext(LogExprContext,0);
	};

	logBiExpr() {
	    return this.getTypedRuleContext(LogBiExprContext,0);
	};

	logUniExpr() {
	    return this.getTypedRuleContext(LogUniExprContext,0);
	};

	setExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetExprContext);
	    } else {
	        return this.getTypedRuleContext(SetExprContext,i);
	    }
	};

	displayExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisplayExprContext);
	    } else {
	        return this.getTypedRuleContext(DisplayExprContext,i);
	    }
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterIfExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitIfExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitIfExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_operatorExpr;
    }

	OPERATOR() {
	    return this.getToken(SchemeLikeLParser.OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogOperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logOperatorExpr;
    }

	LOGOPERATOR() {
	    return this.getToken(SchemeLikeLParser.LOGOPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BiOperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_biOperatorExpr;
    }

	BIOPERATOR() {
	    return this.getToken(SchemeLikeLParser.BIOPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterBiOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitBiOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitBiOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogBiOperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logBiOperatorExpr;
    }

	LOGBIOPERATOR() {
	    return this.getToken(SchemeLikeLParser.LOGBIOPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogBiOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogBiOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogBiOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UniOperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_uniOperatorExpr;
    }

	UNIOPERATOR() {
	    return this.getToken(SchemeLikeLParser.UNIOPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterUniOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitUniOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitUniOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogUniOperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logUniOperatorExpr;
    }

	LOGUNIOPERATOR() {
	    return this.getToken(SchemeLikeLParser.LOGUNIOPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogUniOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogUniOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogUniOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_setExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	varPairExpr() {
	    return this.getTypedRuleContext(VarPairExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterSetExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitSetExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitSetExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VectorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_vectorExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterVectorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitVectorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitVectorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_listExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterListExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitListExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitListExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DisplayExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_displayExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr() {
	    return this.getTypedRuleContext(BiExprContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	callFnc() {
	    return this.getTypedRuleContext(CallFncContext,0);
	};

	uniExpr() {
	    return this.getTypedRuleContext(UniExprContext,0);
	};

	beginExpr() {
	    return this.getTypedRuleContext(BeginExprContext,0);
	};

	ifExpr() {
	    return this.getTypedRuleContext(IfExprContext,0);
	};

	vectorExpr() {
	    return this.getTypedRuleContext(VectorExprContext,0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterDisplayExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitDisplayExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitDisplayExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_literal;
    }

	FLOAT() {
	    return this.getToken(SchemeLikeLParser.FLOAT, 0);
	};

	INT() {
	    return this.getToken(SchemeLikeLParser.INT, 0);
	};

	NFLOAT() {
	    return this.getToken(SchemeLikeLParser.NFLOAT, 0);
	};

	NINT() {
	    return this.getToken(SchemeLikeLParser.NINT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_identifier;
    }

	VARIABLE() {
	    return this.getToken(SchemeLikeLParser.VARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




SchemeLikeLParser.StartContext = StartContext; 
SchemeLikeLParser.ExprContext = ExprContext; 
SchemeLikeLParser.LogExprContext = LogExprContext; 
SchemeLikeLParser.DefineGlobalVarContext = DefineGlobalVarContext; 
SchemeLikeLParser.DefineFncContext = DefineFncContext; 
SchemeLikeLParser.FncBodyExprContext = FncBodyExprContext; 
SchemeLikeLParser.LocalFncBodyExprContext = LocalFncBodyExprContext; 
SchemeLikeLParser.VarPairExprContext = VarPairExprContext; 
SchemeLikeLParser.BeginExprContext = BeginExprContext; 
SchemeLikeLParser.BiExprContext = BiExprContext; 
SchemeLikeLParser.LogBiExprContext = LogBiExprContext; 
SchemeLikeLParser.UniExprContext = UniExprContext; 
SchemeLikeLParser.LogUniExprContext = LogUniExprContext; 
SchemeLikeLParser.CallFncContext = CallFncContext; 
SchemeLikeLParser.CallLambdaFncContext = CallLambdaFncContext; 
SchemeLikeLParser.IfExprContext = IfExprContext; 
SchemeLikeLParser.OperatorExprContext = OperatorExprContext; 
SchemeLikeLParser.LogOperatorExprContext = LogOperatorExprContext; 
SchemeLikeLParser.BiOperatorExprContext = BiOperatorExprContext; 
SchemeLikeLParser.LogBiOperatorExprContext = LogBiOperatorExprContext; 
SchemeLikeLParser.UniOperatorExprContext = UniOperatorExprContext; 
SchemeLikeLParser.LogUniOperatorExprContext = LogUniOperatorExprContext; 
SchemeLikeLParser.SetExprContext = SetExprContext; 
SchemeLikeLParser.VectorExprContext = VectorExprContext; 
SchemeLikeLParser.ListExprContext = ListExprContext; 
SchemeLikeLParser.DisplayExprContext = DisplayExprContext; 
SchemeLikeLParser.LiteralContext = LiteralContext; 
SchemeLikeLParser.IdentifierContext = IdentifierContext; 
