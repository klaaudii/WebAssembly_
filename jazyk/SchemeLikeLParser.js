// Generated from SchemeLikeL.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from './antlr4/index.web.js';
import SchemeLikeLListener from './SchemeLikeLListener.js';
import SchemeLikeLVisitor from './SchemeLikeLVisitor.js';

const serializedATN = [4,1,25,785,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,1,0,3,0,60,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
0,1,0,1,0,1,0,3,0,76,8,0,4,0,78,8,0,11,0,12,0,79,1,0,1,0,1,1,3,1,85,8,1,
1,1,1,1,3,1,89,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,
1,104,8,1,11,1,12,1,105,1,1,3,1,109,8,1,1,1,1,1,3,1,113,8,1,1,2,3,2,116,
8,2,1,2,1,2,3,2,120,8,2,1,2,1,2,1,2,4,2,125,8,2,11,2,12,2,126,1,2,3,2,130,
8,2,1,2,1,2,3,2,134,8,2,1,3,3,3,137,8,3,1,3,1,3,3,3,141,8,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,156,8,3,1,3,3,3,159,8,3,1,3,
1,3,3,3,163,8,3,1,4,3,4,166,8,4,1,4,1,4,3,4,170,8,4,1,4,1,4,3,4,174,8,4,
1,4,1,4,3,4,178,8,4,1,4,1,4,1,4,5,4,183,8,4,10,4,12,4,186,9,4,1,4,3,4,189,
8,4,1,4,1,4,1,4,3,4,194,8,4,1,4,1,4,1,4,1,4,3,4,200,8,4,1,4,1,4,3,4,204,
8,4,1,4,1,4,3,4,208,8,4,1,4,1,4,3,4,212,8,4,1,4,3,4,215,8,4,1,4,1,4,5,4,
219,8,4,10,4,12,4,222,9,4,1,4,3,4,225,8,4,1,4,1,4,3,4,229,8,4,1,4,1,4,1,
4,1,4,3,4,235,8,4,1,5,3,5,238,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,5,5,254,8,5,10,5,12,5,257,9,5,1,5,3,5,260,8,5,1,6,3,6,
263,8,6,1,6,1,6,3,6,267,8,6,1,6,1,6,3,6,271,8,6,1,6,1,6,3,6,275,8,6,1,6,
1,6,1,6,1,6,1,6,3,6,282,8,6,5,6,284,8,6,10,6,12,6,287,9,6,1,6,1,6,3,6,291,
8,6,1,6,1,6,3,6,295,8,6,1,6,1,6,3,6,299,8,6,1,7,3,7,302,8,7,1,7,1,7,1,7,
1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,315,8,7,1,7,3,7,318,8,7,1,8,3,8,321,
8,8,1,8,1,8,3,8,325,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
1,8,1,8,5,8,341,8,8,10,8,12,8,344,9,8,1,8,3,8,347,8,8,1,8,1,8,3,8,351,8,
8,1,9,3,9,354,8,9,1,9,1,9,3,9,358,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
9,1,9,1,9,1,9,1,9,3,9,373,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
9,1,9,3,9,387,8,9,1,9,3,9,390,8,9,1,9,1,9,3,9,394,8,9,1,10,3,10,397,8,10,
1,10,1,10,3,10,401,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
1,10,1,10,1,10,3,10,416,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
1,10,1,10,1,10,3,10,430,8,10,1,10,3,10,433,8,10,1,10,1,10,3,10,437,8,10,
1,11,3,11,440,8,11,1,11,1,11,3,11,444,8,11,1,11,1,11,1,11,1,11,1,11,1,11,
1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,459,8,11,1,11,3,11,462,8,11,1,11,
1,11,3,11,466,8,11,1,12,3,12,469,8,12,1,12,1,12,3,12,473,8,12,1,12,1,12,
1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,488,8,12,1,12,
3,12,491,8,12,1,12,1,12,3,12,495,8,12,1,13,3,13,498,8,13,1,13,1,13,3,13,
502,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
1,13,5,13,518,8,13,10,13,12,13,521,9,13,1,13,3,13,524,8,13,1,13,1,13,3,13,
528,8,13,1,14,3,14,531,8,14,1,14,1,14,3,14,535,8,14,1,14,1,14,3,14,539,8,
14,1,14,1,14,3,14,543,8,14,1,14,3,14,546,8,14,1,14,1,14,5,14,550,8,14,10,
14,12,14,553,9,14,1,14,3,14,556,8,14,1,14,1,14,3,14,560,8,14,1,14,1,14,3,
14,564,8,14,1,14,3,14,567,8,14,4,14,569,8,14,11,14,12,14,570,1,14,1,14,3,
14,575,8,14,1,15,3,15,578,8,15,1,15,1,15,3,15,582,8,15,1,15,1,15,1,15,1,
15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,600,
8,15,1,15,3,15,603,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
1,15,1,15,1,15,1,15,3,15,619,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
1,15,1,15,1,15,1,15,1,15,1,15,3,15,635,8,15,1,15,3,15,638,8,15,1,15,1,15,
3,15,642,8,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
1,22,3,22,657,8,22,1,22,1,22,3,22,661,8,22,1,22,1,22,1,22,1,22,3,22,667,
8,22,1,22,1,22,3,22,671,8,22,1,23,3,23,674,8,23,1,23,1,23,3,23,678,8,23,
1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,691,8,23,10,
23,12,23,694,9,23,1,23,3,23,697,8,23,1,23,1,23,3,23,701,8,23,1,24,3,24,704,
8,24,1,24,1,24,3,24,708,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
1,24,1,24,1,24,1,24,5,24,723,8,24,10,24,12,24,726,9,24,1,24,3,24,729,8,24,
1,24,1,24,3,24,733,8,24,1,25,3,25,736,8,25,1,25,1,25,3,25,740,8,25,1,25,
1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,755,8,25,
1,25,3,25,758,8,25,1,25,1,25,3,25,762,8,25,1,26,3,26,765,8,26,1,26,1,26,
3,26,769,8,26,1,26,1,26,1,26,1,26,3,26,775,8,26,1,26,1,26,3,26,779,8,26,
1,27,1,27,1,28,1,28,1,28,0,0,29,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
30,32,34,36,38,40,42,44,46,48,50,52,54,56,0,1,1,0,21,24,1048,0,77,1,0,0,
0,2,84,1,0,0,0,4,115,1,0,0,0,6,136,1,0,0,0,8,165,1,0,0,0,10,237,1,0,0,0,
12,262,1,0,0,0,14,301,1,0,0,0,16,320,1,0,0,0,18,353,1,0,0,0,20,396,1,0,0,
0,22,439,1,0,0,0,24,468,1,0,0,0,26,497,1,0,0,0,28,530,1,0,0,0,30,577,1,0,
0,0,32,643,1,0,0,0,34,645,1,0,0,0,36,647,1,0,0,0,38,649,1,0,0,0,40,651,1,
0,0,0,42,653,1,0,0,0,44,656,1,0,0,0,46,673,1,0,0,0,48,703,1,0,0,0,50,735,
1,0,0,0,52,764,1,0,0,0,54,780,1,0,0,0,56,782,1,0,0,0,58,60,5,20,0,0,59,58,
1,0,0,0,59,60,1,0,0,0,60,75,1,0,0,0,61,76,3,2,1,0,62,76,3,6,3,0,63,76,3,
8,4,0,64,76,3,54,27,0,65,76,3,56,28,0,66,76,3,26,13,0,67,76,3,44,22,0,68,
76,3,48,24,0,69,76,3,46,23,0,70,76,3,50,25,0,71,76,3,22,11,0,72,76,3,52,
26,0,73,76,3,30,15,0,74,76,3,16,8,0,75,61,1,0,0,0,75,62,1,0,0,0,75,63,1,
0,0,0,75,64,1,0,0,0,75,65,1,0,0,0,75,66,1,0,0,0,75,67,1,0,0,0,75,68,1,0,
0,0,75,69,1,0,0,0,75,70,1,0,0,0,75,71,1,0,0,0,75,72,1,0,0,0,75,73,1,0,0,
0,75,74,1,0,0,0,76,78,1,0,0,0,77,59,1,0,0,0,78,79,1,0,0,0,79,77,1,0,0,0,
79,80,1,0,0,0,80,81,1,0,0,0,81,82,5,0,0,1,82,1,1,0,0,0,83,85,5,20,0,0,84,
83,1,0,0,0,84,85,1,0,0,0,85,86,1,0,0,0,86,88,5,18,0,0,87,89,5,20,0,0,88,
87,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,103,3,32,16,0,91,104,3,18,9,0,
92,104,3,2,1,0,93,94,5,20,0,0,94,104,3,54,27,0,95,96,5,20,0,0,96,104,3,56,
28,0,97,104,3,26,13,0,98,104,3,22,11,0,99,104,3,16,8,0,100,104,3,30,15,0,
101,104,3,46,23,0,102,104,3,48,24,0,103,91,1,0,0,0,103,92,1,0,0,0,103,93,
1,0,0,0,103,95,1,0,0,0,103,97,1,0,0,0,103,98,1,0,0,0,103,99,1,0,0,0,103,
100,1,0,0,0,103,101,1,0,0,0,103,102,1,0,0,0,104,105,1,0,0,0,105,103,1,0,
0,0,105,106,1,0,0,0,106,108,1,0,0,0,107,109,5,20,0,0,108,107,1,0,0,0,108,
109,1,0,0,0,109,110,1,0,0,0,110,112,5,19,0,0,111,113,5,20,0,0,112,111,1,
0,0,0,112,113,1,0,0,0,113,3,1,0,0,0,114,116,5,20,0,0,115,114,1,0,0,0,115,
116,1,0,0,0,116,117,1,0,0,0,117,119,5,18,0,0,118,120,5,20,0,0,119,118,1,
0,0,0,119,120,1,0,0,0,120,121,1,0,0,0,121,124,3,34,17,0,122,125,3,24,12,
0,123,125,3,20,10,0,124,122,1,0,0,0,124,123,1,0,0,0,125,126,1,0,0,0,126,
124,1,0,0,0,126,127,1,0,0,0,127,129,1,0,0,0,128,130,5,20,0,0,129,128,1,0,
0,0,129,130,1,0,0,0,130,131,1,0,0,0,131,133,5,19,0,0,132,134,5,20,0,0,133,
132,1,0,0,0,133,134,1,0,0,0,134,5,1,0,0,0,135,137,5,20,0,0,136,135,1,0,0,
0,136,137,1,0,0,0,137,138,1,0,0,0,138,140,5,18,0,0,139,141,5,20,0,0,140,
139,1,0,0,0,140,141,1,0,0,0,141,142,1,0,0,0,142,143,5,1,0,0,143,144,5,20,
0,0,144,155,3,56,28,0,145,146,5,20,0,0,146,156,3,56,28,0,147,148,5,20,0,
0,148,156,3,54,27,0,149,156,3,2,1,0,150,156,3,26,13,0,151,156,3,46,23,0,
152,156,3,48,24,0,153,156,3,22,11,0,154,156,3,18,9,0,155,145,1,0,0,0,155,
147,1,0,0,0,155,149,1,0,0,0,155,150,1,0,0,0,155,151,1,0,0,0,155,152,1,0,
0,0,155,153,1,0,0,0,155,154,1,0,0,0,156,158,1,0,0,0,157,159,5,20,0,0,158,
157,1,0,0,0,158,159,1,0,0,0,159,160,1,0,0,0,160,162,5,19,0,0,161,163,5,20,
0,0,162,161,1,0,0,0,162,163,1,0,0,0,163,7,1,0,0,0,164,166,5,20,0,0,165,164,
1,0,0,0,165,166,1,0,0,0,166,167,1,0,0,0,167,169,5,18,0,0,168,170,5,20,0,
0,169,168,1,0,0,0,169,170,1,0,0,0,170,171,1,0,0,0,171,173,5,1,0,0,172,174,
5,20,0,0,173,172,1,0,0,0,173,174,1,0,0,0,174,234,1,0,0,0,175,177,5,18,0,
0,176,178,5,20,0,0,177,176,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,184,
3,56,28,0,180,181,5,20,0,0,181,183,3,56,28,0,182,180,1,0,0,0,183,186,1,0,
0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,187,
189,5,20,0,0,188,187,1,0,0,0,188,189,1,0,0,0,189,190,1,0,0,0,190,193,5,19,
0,0,191,194,3,10,5,0,192,194,3,12,6,0,193,191,1,0,0,0,193,192,1,0,0,0,194,
195,1,0,0,0,195,196,5,19,0,0,196,235,1,0,0,0,197,199,3,56,28,0,198,200,5,
20,0,0,199,198,1,0,0,0,199,200,1,0,0,0,200,201,1,0,0,0,201,203,5,18,0,0,
202,204,5,20,0,0,203,202,1,0,0,0,203,204,1,0,0,0,204,205,1,0,0,0,205,207,
5,2,0,0,206,208,5,20,0,0,207,206,1,0,0,0,207,208,1,0,0,0,208,209,1,0,0,0,
209,211,5,18,0,0,210,212,5,20,0,0,211,210,1,0,0,0,211,212,1,0,0,0,212,214,
1,0,0,0,213,215,3,56,28,0,214,213,1,0,0,0,214,215,1,0,0,0,215,220,1,0,0,
0,216,217,5,20,0,0,217,219,3,56,28,0,218,216,1,0,0,0,219,222,1,0,0,0,220,
218,1,0,0,0,220,221,1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,223,225,5,20,
0,0,224,223,1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,228,5,19,0,0,227,
229,5,20,0,0,228,227,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,231,3,10,
5,0,231,232,5,19,0,0,232,233,5,19,0,0,233,235,1,0,0,0,234,175,1,0,0,0,234,
197,1,0,0,0,235,9,1,0,0,0,236,238,5,20,0,0,237,236,1,0,0,0,237,238,1,0,0,
0,238,255,1,0,0,0,239,254,3,2,1,0,240,254,3,18,9,0,241,254,3,22,11,0,242,
243,5,20,0,0,243,254,3,54,27,0,244,245,5,20,0,0,245,254,3,56,28,0,246,254,
3,26,13,0,247,254,3,30,15,0,248,254,3,44,22,0,249,254,3,48,24,0,250,254,
3,50,25,0,251,254,3,46,23,0,252,254,3,16,8,0,253,239,1,0,0,0,253,240,1,0,
0,0,253,241,1,0,0,0,253,242,1,0,0,0,253,244,1,0,0,0,253,246,1,0,0,0,253,
247,1,0,0,0,253,248,1,0,0,0,253,249,1,0,0,0,253,250,1,0,0,0,253,251,1,0,
0,0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,
259,1,0,0,0,257,255,1,0,0,0,258,260,5,20,0,0,259,258,1,0,0,0,259,260,1,0,
0,0,260,11,1,0,0,0,261,263,5,20,0,0,262,261,1,0,0,0,262,263,1,0,0,0,263,
264,1,0,0,0,264,266,5,18,0,0,265,267,5,20,0,0,266,265,1,0,0,0,266,267,1,
0,0,0,267,268,1,0,0,0,268,270,5,3,0,0,269,271,5,20,0,0,270,269,1,0,0,0,270,
271,1,0,0,0,271,272,1,0,0,0,272,274,5,18,0,0,273,275,5,20,0,0,274,273,1,
0,0,0,274,275,1,0,0,0,275,285,1,0,0,0,276,277,5,18,0,0,277,278,3,14,7,0,
278,279,5,19,0,0,279,281,1,0,0,0,280,282,5,20,0,0,281,280,1,0,0,0,281,282,
1,0,0,0,282,284,1,0,0,0,283,276,1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,
285,286,1,0,0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,290,5,19,0,0,289,291,
5,20,0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,294,3,10,5,
0,293,295,5,20,0,0,294,293,1,0,0,0,294,295,1,0,0,0,295,296,1,0,0,0,296,298,
5,19,0,0,297,299,5,20,0,0,298,297,1,0,0,0,298,299,1,0,0,0,299,13,1,0,0,0,
300,302,5,20,0,0,301,300,1,0,0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,314,
3,56,28,0,304,315,3,2,1,0,305,306,5,20,0,0,306,315,3,54,27,0,307,308,5,20,
0,0,308,315,3,56,28,0,309,315,3,26,13,0,310,315,3,46,23,0,311,315,3,48,24,
0,312,315,3,22,11,0,313,315,3,18,9,0,314,304,1,0,0,0,314,305,1,0,0,0,314,
307,1,0,0,0,314,309,1,0,0,0,314,310,1,0,0,0,314,311,1,0,0,0,314,312,1,0,
0,0,314,313,1,0,0,0,315,317,1,0,0,0,316,318,5,20,0,0,317,316,1,0,0,0,317,
318,1,0,0,0,318,15,1,0,0,0,319,321,5,20,0,0,320,319,1,0,0,0,320,321,1,0,
0,0,321,322,1,0,0,0,322,324,5,18,0,0,323,325,5,20,0,0,324,323,1,0,0,0,324,
325,1,0,0,0,325,326,1,0,0,0,326,342,5,4,0,0,327,341,3,2,1,0,328,329,5,20,
0,0,329,341,3,54,27,0,330,331,5,20,0,0,331,341,3,56,28,0,332,341,3,26,13,
0,333,341,3,44,22,0,334,341,3,50,25,0,335,341,3,30,15,0,336,341,3,46,23,
0,337,341,3,48,24,0,338,341,3,22,11,0,339,341,3,18,9,0,340,327,1,0,0,0,340,
328,1,0,0,0,340,330,1,0,0,0,340,332,1,0,0,0,340,333,1,0,0,0,340,334,1,0,
0,0,340,335,1,0,0,0,340,336,1,0,0,0,340,337,1,0,0,0,340,338,1,0,0,0,340,
339,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,346,1,0,
0,0,344,342,1,0,0,0,345,347,5,20,0,0,346,345,1,0,0,0,346,347,1,0,0,0,347,
348,1,0,0,0,348,350,5,19,0,0,349,351,5,20,0,0,350,349,1,0,0,0,350,351,1,
0,0,0,351,17,1,0,0,0,352,354,5,20,0,0,353,352,1,0,0,0,353,354,1,0,0,0,354,
355,1,0,0,0,355,357,5,18,0,0,356,358,5,20,0,0,357,356,1,0,0,0,357,358,1,
0,0,0,358,359,1,0,0,0,359,372,3,36,18,0,360,373,3,18,9,0,361,373,3,2,1,0,
362,363,5,20,0,0,363,373,3,54,27,0,364,365,5,20,0,0,365,373,3,56,28,0,366,
373,3,26,13,0,367,373,3,22,11,0,368,373,3,16,8,0,369,373,3,30,15,0,370,373,
3,46,23,0,371,373,3,48,24,0,372,360,1,0,0,0,372,361,1,0,0,0,372,362,1,0,
0,0,372,364,1,0,0,0,372,366,1,0,0,0,372,367,1,0,0,0,372,368,1,0,0,0,372,
369,1,0,0,0,372,370,1,0,0,0,372,371,1,0,0,0,373,386,1,0,0,0,374,387,3,18,
9,0,375,387,3,2,1,0,376,377,5,20,0,0,377,387,3,54,27,0,378,379,5,20,0,0,
379,387,3,56,28,0,380,387,3,26,13,0,381,387,3,22,11,0,382,387,3,16,8,0,383,
387,3,30,15,0,384,387,3,46,23,0,385,387,3,48,24,0,386,374,1,0,0,0,386,375,
1,0,0,0,386,376,1,0,0,0,386,378,1,0,0,0,386,380,1,0,0,0,386,381,1,0,0,0,
386,382,1,0,0,0,386,383,1,0,0,0,386,384,1,0,0,0,386,385,1,0,0,0,387,389,
1,0,0,0,388,390,5,20,0,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,
391,393,5,19,0,0,392,394,5,20,0,0,393,392,1,0,0,0,393,394,1,0,0,0,394,19,
1,0,0,0,395,397,5,20,0,0,396,395,1,0,0,0,396,397,1,0,0,0,397,398,1,0,0,0,
398,400,5,18,0,0,399,401,5,20,0,0,400,399,1,0,0,0,400,401,1,0,0,0,401,402,
1,0,0,0,402,415,3,38,19,0,403,416,3,18,9,0,404,416,3,2,1,0,405,406,5,20,
0,0,406,416,3,54,27,0,407,408,5,20,0,0,408,416,3,56,28,0,409,416,3,26,13,
0,410,416,3,22,11,0,411,416,3,16,8,0,412,416,3,30,15,0,413,416,3,46,23,0,
414,416,3,48,24,0,415,403,1,0,0,0,415,404,1,0,0,0,415,405,1,0,0,0,415,407,
1,0,0,0,415,409,1,0,0,0,415,410,1,0,0,0,415,411,1,0,0,0,415,412,1,0,0,0,
415,413,1,0,0,0,415,414,1,0,0,0,416,429,1,0,0,0,417,430,3,18,9,0,418,430,
3,2,1,0,419,420,5,20,0,0,420,430,3,54,27,0,421,422,5,20,0,0,422,430,3,56,
28,0,423,430,3,26,13,0,424,430,3,22,11,0,425,430,3,16,8,0,426,430,3,30,15,
0,427,430,3,46,23,0,428,430,3,48,24,0,429,417,1,0,0,0,429,418,1,0,0,0,429,
419,1,0,0,0,429,421,1,0,0,0,429,423,1,0,0,0,429,424,1,0,0,0,429,425,1,0,
0,0,429,426,1,0,0,0,429,427,1,0,0,0,429,428,1,0,0,0,430,432,1,0,0,0,431,
433,5,20,0,0,432,431,1,0,0,0,432,433,1,0,0,0,433,434,1,0,0,0,434,436,5,19,
0,0,435,437,5,20,0,0,436,435,1,0,0,0,436,437,1,0,0,0,437,21,1,0,0,0,438,
440,5,20,0,0,439,438,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,443,5,18,
0,0,442,444,5,20,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,
458,3,40,20,0,446,459,3,18,9,0,447,459,3,2,1,0,448,449,5,20,0,0,449,459,
3,54,27,0,450,451,5,20,0,0,451,459,3,56,28,0,452,459,3,26,13,0,453,459,3,
22,11,0,454,459,3,16,8,0,455,459,3,30,15,0,456,459,3,46,23,0,457,459,3,48,
24,0,458,446,1,0,0,0,458,447,1,0,0,0,458,448,1,0,0,0,458,450,1,0,0,0,458,
452,1,0,0,0,458,453,1,0,0,0,458,454,1,0,0,0,458,455,1,0,0,0,458,456,1,0,
0,0,458,457,1,0,0,0,459,461,1,0,0,0,460,462,5,20,0,0,461,460,1,0,0,0,461,
462,1,0,0,0,462,463,1,0,0,0,463,465,5,19,0,0,464,466,5,20,0,0,465,464,1,
0,0,0,465,466,1,0,0,0,466,23,1,0,0,0,467,469,5,20,0,0,468,467,1,0,0,0,468,
469,1,0,0,0,469,470,1,0,0,0,470,472,5,18,0,0,471,473,5,20,0,0,472,471,1,
0,0,0,472,473,1,0,0,0,473,474,1,0,0,0,474,487,3,42,21,0,475,488,3,18,9,0,
476,488,3,2,1,0,477,478,5,20,0,0,478,488,3,54,27,0,479,480,5,20,0,0,480,
488,3,56,28,0,481,488,3,26,13,0,482,488,3,22,11,0,483,488,3,16,8,0,484,488,
3,30,15,0,485,488,3,46,23,0,486,488,3,48,24,0,487,475,1,0,0,0,487,476,1,
0,0,0,487,477,1,0,0,0,487,479,1,0,0,0,487,481,1,0,0,0,487,482,1,0,0,0,487,
483,1,0,0,0,487,484,1,0,0,0,487,485,1,0,0,0,487,486,1,0,0,0,488,490,1,0,
0,0,489,491,5,20,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,
494,5,19,0,0,493,495,5,20,0,0,494,493,1,0,0,0,494,495,1,0,0,0,495,25,1,0,
0,0,496,498,5,20,0,0,497,496,1,0,0,0,497,498,1,0,0,0,498,499,1,0,0,0,499,
501,5,18,0,0,500,502,5,20,0,0,501,500,1,0,0,0,501,502,1,0,0,0,502,503,1,
0,0,0,503,519,3,56,28,0,504,518,3,18,9,0,505,518,3,2,1,0,506,507,5,20,0,
0,507,518,3,54,27,0,508,509,5,20,0,0,509,518,3,56,28,0,510,518,3,26,13,0,
511,518,3,22,11,0,512,518,3,16,8,0,513,518,3,30,15,0,514,518,3,46,23,0,515,
518,3,48,24,0,516,518,3,28,14,0,517,504,1,0,0,0,517,505,1,0,0,0,517,506,
1,0,0,0,517,508,1,0,0,0,517,510,1,0,0,0,517,511,1,0,0,0,517,512,1,0,0,0,
517,513,1,0,0,0,517,514,1,0,0,0,517,515,1,0,0,0,517,516,1,0,0,0,518,521,
1,0,0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,523,1,0,0,0,521,519,1,0,0,0,
522,524,5,20,0,0,523,522,1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,527,
5,19,0,0,526,528,5,20,0,0,527,526,1,0,0,0,527,528,1,0,0,0,528,27,1,0,0,0,
529,531,5,20,0,0,530,529,1,0,0,0,530,531,1,0,0,0,531,532,1,0,0,0,532,534,
5,18,0,0,533,535,5,20,0,0,534,533,1,0,0,0,534,535,1,0,0,0,535,536,1,0,0,
0,536,538,5,2,0,0,537,539,5,20,0,0,538,537,1,0,0,0,538,539,1,0,0,0,539,540,
1,0,0,0,540,542,5,18,0,0,541,543,5,20,0,0,542,541,1,0,0,0,542,543,1,0,0,
0,543,545,1,0,0,0,544,546,3,56,28,0,545,544,1,0,0,0,545,546,1,0,0,0,546,
551,1,0,0,0,547,548,5,20,0,0,548,550,3,56,28,0,549,547,1,0,0,0,550,553,1,
0,0,0,551,549,1,0,0,0,551,552,1,0,0,0,552,555,1,0,0,0,553,551,1,0,0,0,554,
556,5,20,0,0,555,554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,559,5,19,
0,0,558,560,5,20,0,0,559,558,1,0,0,0,559,560,1,0,0,0,560,568,1,0,0,0,561,
564,3,2,1,0,562,564,3,26,13,0,563,561,1,0,0,0,563,562,1,0,0,0,564,566,1,
0,0,0,565,567,5,20,0,0,566,565,1,0,0,0,566,567,1,0,0,0,567,569,1,0,0,0,568,
563,1,0,0,0,569,570,1,0,0,0,570,568,1,0,0,0,570,571,1,0,0,0,571,572,1,0,
0,0,572,574,5,19,0,0,573,575,5,20,0,0,574,573,1,0,0,0,574,575,1,0,0,0,575,
29,1,0,0,0,576,578,5,20,0,0,577,576,1,0,0,0,577,578,1,0,0,0,578,579,1,0,
0,0,579,581,5,18,0,0,580,582,5,20,0,0,581,580,1,0,0,0,581,582,1,0,0,0,582,
583,1,0,0,0,583,599,5,5,0,0,584,600,3,18,9,0,585,600,3,2,1,0,586,587,5,20,
0,0,587,600,3,54,27,0,588,589,5,20,0,0,589,600,3,56,28,0,590,600,3,26,13,
0,591,600,3,22,11,0,592,600,3,16,8,0,593,600,3,30,15,0,594,600,3,46,23,0,
595,600,3,48,24,0,596,600,3,4,2,0,597,600,3,20,10,0,598,600,3,24,12,0,599,
584,1,0,0,0,599,585,1,0,0,0,599,586,1,0,0,0,599,588,1,0,0,0,599,590,1,0,
0,0,599,591,1,0,0,0,599,592,1,0,0,0,599,593,1,0,0,0,599,594,1,0,0,0,599,
595,1,0,0,0,599,596,1,0,0,0,599,597,1,0,0,0,599,598,1,0,0,0,600,602,1,0,
0,0,601,603,5,20,0,0,602,601,1,0,0,0,602,603,1,0,0,0,603,618,1,0,0,0,604,
619,3,18,9,0,605,619,3,2,1,0,606,607,5,20,0,0,607,619,3,54,27,0,608,609,
5,20,0,0,609,619,3,56,28,0,610,619,3,26,13,0,611,619,3,22,11,0,612,619,3,
16,8,0,613,619,3,30,15,0,614,619,3,46,23,0,615,619,3,48,24,0,616,619,3,44,
22,0,617,619,3,50,25,0,618,604,1,0,0,0,618,605,1,0,0,0,618,606,1,0,0,0,618,
608,1,0,0,0,618,610,1,0,0,0,618,611,1,0,0,0,618,612,1,0,0,0,618,613,1,0,
0,0,618,614,1,0,0,0,618,615,1,0,0,0,618,616,1,0,0,0,618,617,1,0,0,0,619,
634,1,0,0,0,620,635,3,18,9,0,621,635,3,2,1,0,622,623,5,20,0,0,623,635,3,
54,27,0,624,625,5,20,0,0,625,635,3,56,28,0,626,635,3,26,13,0,627,635,3,22,
11,0,628,635,3,16,8,0,629,635,3,30,15,0,630,635,3,46,23,0,631,635,3,48,24,
0,632,635,3,44,22,0,633,635,3,50,25,0,634,620,1,0,0,0,634,621,1,0,0,0,634,
622,1,0,0,0,634,624,1,0,0,0,634,626,1,0,0,0,634,627,1,0,0,0,634,628,1,0,
0,0,634,629,1,0,0,0,634,630,1,0,0,0,634,631,1,0,0,0,634,632,1,0,0,0,634,
633,1,0,0,0,634,635,1,0,0,0,635,637,1,0,0,0,636,638,5,20,0,0,637,636,1,0,
0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,641,5,19,0,0,640,642,5,20,0,0,641,
640,1,0,0,0,641,642,1,0,0,0,642,31,1,0,0,0,643,644,5,11,0,0,644,33,1,0,0,
0,645,646,5,12,0,0,646,35,1,0,0,0,647,648,5,13,0,0,648,37,1,0,0,0,649,650,
5,14,0,0,650,39,1,0,0,0,651,652,5,15,0,0,652,41,1,0,0,0,653,654,5,16,0,0,
654,43,1,0,0,0,655,657,5,20,0,0,656,655,1,0,0,0,656,657,1,0,0,0,657,658,
1,0,0,0,658,660,5,18,0,0,659,661,5,20,0,0,660,659,1,0,0,0,660,661,1,0,0,
0,661,662,1,0,0,0,662,663,5,6,0,0,663,664,5,20,0,0,664,666,3,14,7,0,665,
667,5,20,0,0,666,665,1,0,0,0,666,667,1,0,0,0,667,668,1,0,0,0,668,670,5,19,
0,0,669,671,5,20,0,0,670,669,1,0,0,0,670,671,1,0,0,0,671,45,1,0,0,0,672,
674,5,20,0,0,673,672,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,677,5,18,
0,0,676,678,5,20,0,0,677,676,1,0,0,0,677,678,1,0,0,0,678,679,1,0,0,0,679,
692,5,7,0,0,680,691,3,18,9,0,681,691,3,2,1,0,682,683,5,20,0,0,683,691,3,
54,27,0,684,685,5,20,0,0,685,691,3,56,28,0,686,691,3,26,13,0,687,691,3,22,
11,0,688,691,3,16,8,0,689,691,3,30,15,0,690,680,1,0,0,0,690,681,1,0,0,0,
690,682,1,0,0,0,690,684,1,0,0,0,690,686,1,0,0,0,690,687,1,0,0,0,690,688,
1,0,0,0,690,689,1,0,0,0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,1,0,0,0,
693,696,1,0,0,0,694,692,1,0,0,0,695,697,5,20,0,0,696,695,1,0,0,0,696,697,
1,0,0,0,697,698,1,0,0,0,698,700,5,19,0,0,699,701,5,20,0,0,700,699,1,0,0,
0,700,701,1,0,0,0,701,47,1,0,0,0,702,704,5,20,0,0,703,702,1,0,0,0,703,704,
1,0,0,0,704,705,1,0,0,0,705,707,5,18,0,0,706,708,5,20,0,0,707,706,1,0,0,
0,707,708,1,0,0,0,708,709,1,0,0,0,709,724,5,8,0,0,710,723,3,18,9,0,711,723,
3,2,1,0,712,713,5,20,0,0,713,723,3,54,27,0,714,715,5,20,0,0,715,723,3,56,
28,0,716,723,3,26,13,0,717,723,3,22,11,0,718,723,3,16,8,0,719,723,3,30,15,
0,720,723,3,46,23,0,721,723,3,48,24,0,722,710,1,0,0,0,722,711,1,0,0,0,722,
712,1,0,0,0,722,714,1,0,0,0,722,716,1,0,0,0,722,717,1,0,0,0,722,718,1,0,
0,0,722,719,1,0,0,0,722,720,1,0,0,0,722,721,1,0,0,0,723,726,1,0,0,0,724,
722,1,0,0,0,724,725,1,0,0,0,725,728,1,0,0,0,726,724,1,0,0,0,727,729,5,20,
0,0,728,727,1,0,0,0,728,729,1,0,0,0,729,730,1,0,0,0,730,732,5,19,0,0,731,
733,5,20,0,0,732,731,1,0,0,0,732,733,1,0,0,0,733,49,1,0,0,0,734,736,5,20,
0,0,735,734,1,0,0,0,735,736,1,0,0,0,736,737,1,0,0,0,737,739,5,18,0,0,738,
740,5,20,0,0,739,738,1,0,0,0,739,740,1,0,0,0,740,741,1,0,0,0,741,754,5,9,
0,0,742,755,3,18,9,0,743,755,3,2,1,0,744,745,5,20,0,0,745,755,3,54,27,0,
746,747,5,20,0,0,747,755,3,56,28,0,748,755,3,26,13,0,749,755,3,22,11,0,750,
755,3,16,8,0,751,755,3,30,15,0,752,755,3,46,23,0,753,755,3,48,24,0,754,742,
1,0,0,0,754,743,1,0,0,0,754,744,1,0,0,0,754,746,1,0,0,0,754,748,1,0,0,0,
754,749,1,0,0,0,754,750,1,0,0,0,754,751,1,0,0,0,754,752,1,0,0,0,754,753,
1,0,0,0,755,757,1,0,0,0,756,758,5,20,0,0,757,756,1,0,0,0,757,758,1,0,0,0,
758,759,1,0,0,0,759,761,5,19,0,0,760,762,5,20,0,0,761,760,1,0,0,0,761,762,
1,0,0,0,762,51,1,0,0,0,763,765,5,20,0,0,764,763,1,0,0,0,764,765,1,0,0,0,
765,766,1,0,0,0,766,768,5,18,0,0,767,769,5,20,0,0,768,767,1,0,0,0,768,769,
1,0,0,0,769,770,1,0,0,0,770,771,5,10,0,0,771,772,5,20,0,0,772,774,3,56,28,
0,773,775,5,20,0,0,774,773,1,0,0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,778,
5,19,0,0,777,779,5,20,0,0,778,777,1,0,0,0,778,779,1,0,0,0,779,53,1,0,0,0,
780,781,7,0,0,0,781,55,1,0,0,0,782,783,5,17,0,0,783,57,1,0,0,0,131,59,75,
79,84,88,103,105,108,112,115,119,124,126,129,133,136,140,155,158,162,165,
169,173,177,184,188,193,199,203,207,211,214,220,224,228,234,237,253,255,
259,262,266,270,274,281,285,290,294,298,301,314,317,320,324,340,342,346,
350,353,357,372,386,389,393,396,400,415,429,432,436,439,443,458,461,465,
468,472,487,490,494,497,501,517,519,523,527,530,534,538,542,545,551,555,
559,563,566,570,574,577,581,599,602,618,634,637,641,656,660,666,670,673,
677,690,692,696,700,703,707,722,724,728,732,735,739,754,757,761,764,768,
774,778];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class SchemeLikeLParser extends antlr4.Parser {

    static grammarFileName = "SchemeLikeL.g4";
    static literalNames = [ null, "'define'", "'lambda'", "'let'", "'begin'", 
                            "'if'", "'set!'", "'vector'", "'list'", "'display'", 
                            "'export'", null, null, null, null, null, "'null?'", 
                            null, "'('", "')'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, "OPERATOR", "LOGOPERATOR", 
                             "BIOPERATOR", "LOGBIOPERATOR", "UNIOPERATOR", 
                             "LOGUNIOPERATOR", "VARIABLE", "PSTART", "PEND", 
                             "SPACE", "FLOAT", "INT", "NFLOAT", "NINT", 
                             "WS" ];
    static ruleNames = [ "start", "expr", "logExpr", "defineGlobalVar", 
                         "defineFnc", "fncBodyExpr", "localFncBodyExpr", 
                         "varPairExpr", "beginExpr", "biExpr", "logBiExpr", 
                         "uniExpr", "logUniExpr", "callFnc", "callLambdaFnc", 
                         "ifExpr", "operatorExpr", "logOperatorExpr", "biOperatorExpr", 
                         "logBiOperatorExpr", "uniOperatorExpr", "logUniOperatorExpr", 
                         "setExpr", "vectorExpr", "listExpr", "displayExpr", 
                         "exportExpr", "literal", "identifier" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SchemeLikeLParser.ruleNames;
        this.literalNames = SchemeLikeLParser.literalNames;
        this.symbolicNames = SchemeLikeLParser.symbolicNames;
    }



	start() {
	    let localctx = new StartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SchemeLikeLParser.RULE_start);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 77; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 59;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	            if(la_===1) {
	                this.state = 58;
	                this.match(SchemeLikeLParser.SPACE);

	            }
	            this.state = 75;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 61;
	                this.expr();
	                break;

	            case 2:
	                this.state = 62;
	                this.defineGlobalVar();
	                break;

	            case 3:
	                this.state = 63;
	                this.defineFnc();
	                break;

	            case 4:
	                this.state = 64;
	                this.literal();
	                break;

	            case 5:
	                this.state = 65;
	                this.identifier();
	                break;

	            case 6:
	                this.state = 66;
	                this.callFnc();
	                break;

	            case 7:
	                this.state = 67;
	                this.setExpr();
	                break;

	            case 8:
	                this.state = 68;
	                this.listExpr();
	                break;

	            case 9:
	                this.state = 69;
	                this.vectorExpr();
	                break;

	            case 10:
	                this.state = 70;
	                this.displayExpr();
	                break;

	            case 11:
	                this.state = 71;
	                this.uniExpr();
	                break;

	            case 12:
	                this.state = 72;
	                this.exportExpr();
	                break;

	            case 13:
	                this.state = 73;
	                this.ifExpr();
	                break;

	            case 14:
	                this.state = 74;
	                this.beginExpr();
	                break;

	            }
	            this.state = 79; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 32899072) !== 0));
	        this.state = 81;
	        this.match(SchemeLikeLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SchemeLikeLParser.RULE_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 84;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 83;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 86;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 88;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 87;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 90;
	        this.operatorExpr();
	        this.state = 103; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 103;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        		switch(la_) {
	        		case 1:
	        		    this.state = 91;
	        		    this.biExpr();
	        		    break;

	        		case 2:
	        		    this.state = 92;
	        		    this.expr();
	        		    break;

	        		case 3:
	        		    this.state = 93;
	        		    this.match(SchemeLikeLParser.SPACE);
	        		    this.state = 94;
	        		    this.literal();
	        		    break;

	        		case 4:
	        		    this.state = 95;
	        		    this.match(SchemeLikeLParser.SPACE);
	        		    this.state = 96;
	        		    this.identifier();
	        		    break;

	        		case 5:
	        		    this.state = 97;
	        		    this.callFnc();
	        		    break;

	        		case 6:
	        		    this.state = 98;
	        		    this.uniExpr();
	        		    break;

	        		case 7:
	        		    this.state = 99;
	        		    this.beginExpr();
	        		    break;

	        		case 8:
	        		    this.state = 100;
	        		    this.ifExpr();
	        		    break;

	        		case 9:
	        		    this.state = 101;
	        		    this.vectorExpr();
	        		    break;

	        		case 10:
	        		    this.state = 102;
	        		    this.listExpr();
	        		    break;

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 105; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,6, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 108;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 107;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 110;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 112;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        if(la_===1) {
	            this.state = 111;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logExpr() {
	    let localctx = new LogExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SchemeLikeLParser.RULE_logExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 115;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 114;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 117;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 119;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 118;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 121;
	        this.logOperatorExpr();
	        this.state = 124; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 124;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        		switch(la_) {
	        		case 1:
	        		    this.state = 122;
	        		    this.logUniExpr();
	        		    break;

	        		case 2:
	        		    this.state = 123;
	        		    this.logBiExpr();
	        		    break;

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 126; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,12, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 129;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 128;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 131;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 133;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        if(la_===1) {
	            this.state = 132;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defineGlobalVar() {
	    let localctx = new DefineGlobalVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SchemeLikeLParser.RULE_defineGlobalVar);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 136;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 135;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 138;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 140;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 139;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 142;
	        this.match(SchemeLikeLParser.T__0);
	        this.state = 143;
	        this.match(SchemeLikeLParser.SPACE);
	        this.state = 144;
	        this.identifier();
	        this.state = 155;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 145;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 146;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 147;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 148;
	            this.literal();
	            break;

	        case 3:
	            this.state = 149;
	            this.expr();
	            break;

	        case 4:
	            this.state = 150;
	            this.callFnc();
	            break;

	        case 5:
	            this.state = 151;
	            this.vectorExpr();
	            break;

	        case 6:
	            this.state = 152;
	            this.listExpr();
	            break;

	        case 7:
	            this.state = 153;
	            this.uniExpr();
	            break;

	        case 8:
	            this.state = 154;
	            this.biExpr();
	            break;

	        }
	        this.state = 158;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 157;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 160;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 162;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        if(la_===1) {
	            this.state = 161;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defineFnc() {
	    let localctx = new DefineFncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SchemeLikeLParser.RULE_defineFnc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 165;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 164;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 167;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 169;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 168;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 171;
	        this.match(SchemeLikeLParser.T__0);
	        this.state = 173;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 172;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 234;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.state = 175;
	            this.match(SchemeLikeLParser.PSTART);
	            this.state = 177;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 176;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 179;
	            this.identifier();
	            this.state = 184;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 180;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 181;
	                    this.identifier(); 
	                }
	                this.state = 186;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
	            }

	            this.state = 188;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 187;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 190;
	            this.match(SchemeLikeLParser.PEND);
	            this.state = 193;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 191;
	                this.fncBodyExpr();
	                break;

	            case 2:
	                this.state = 192;
	                this.localFncBodyExpr();
	                break;

	            }
	            this.state = 195;
	            this.match(SchemeLikeLParser.PEND);
	            break;
	        case 17:
	            this.state = 197;
	            this.identifier();
	            this.state = 199;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 198;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 201;
	            this.match(SchemeLikeLParser.PSTART);
	            this.state = 203;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 202;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 205;
	            this.match(SchemeLikeLParser.T__1);
	            this.state = 207;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 206;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 209;
	            this.match(SchemeLikeLParser.PSTART);
	            this.state = 211;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	            if(la_===1) {
	                this.state = 210;
	                this.match(SchemeLikeLParser.SPACE);

	            }
	            this.state = 214;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17) {
	                this.state = 213;
	                this.identifier();
	            }

	            this.state = 220;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,32,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 216;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 217;
	                    this.identifier(); 
	                }
	                this.state = 222;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,32,this._ctx);
	            }

	            this.state = 224;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 223;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 226;
	            this.match(SchemeLikeLParser.PEND);
	            this.state = 228;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	            if(la_===1) {
	                this.state = 227;
	                this.match(SchemeLikeLParser.SPACE);

	            }
	            this.state = 230;
	            this.fncBodyExpr();
	            this.state = 231;
	            this.match(SchemeLikeLParser.PEND);
	            this.state = 232;
	            this.match(SchemeLikeLParser.PEND);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fncBodyExpr() {
	    let localctx = new FncBodyExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SchemeLikeLParser.RULE_fncBodyExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 237;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        if(la_===1) {
	            this.state = 236;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	        this.state = 255;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,38,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 253;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 239;
	                    this.expr();
	                    break;

	                case 2:
	                    this.state = 240;
	                    this.biExpr();
	                    break;

	                case 3:
	                    this.state = 241;
	                    this.uniExpr();
	                    break;

	                case 4:
	                    this.state = 242;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 243;
	                    this.literal();
	                    break;

	                case 5:
	                    this.state = 244;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 245;
	                    this.identifier();
	                    break;

	                case 6:
	                    this.state = 246;
	                    this.callFnc();
	                    break;

	                case 7:
	                    this.state = 247;
	                    this.ifExpr();
	                    break;

	                case 8:
	                    this.state = 248;
	                    this.setExpr();
	                    break;

	                case 9:
	                    this.state = 249;
	                    this.listExpr();
	                    break;

	                case 10:
	                    this.state = 250;
	                    this.displayExpr();
	                    break;

	                case 11:
	                    this.state = 251;
	                    this.vectorExpr();
	                    break;

	                case 12:
	                    this.state = 252;
	                    this.beginExpr();
	                    break;

	                } 
	            }
	            this.state = 257;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,38,this._ctx);
	        }

	        this.state = 259;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        if(la_===1) {
	            this.state = 258;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localFncBodyExpr() {
	    let localctx = new LocalFncBodyExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SchemeLikeLParser.RULE_localFncBodyExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 262;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 261;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 264;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 266;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 265;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 268;
	        this.match(SchemeLikeLParser.T__2);
	        this.state = 270;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 269;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 272;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 274;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 273;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 285;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18) {
	            this.state = 276;
	            this.match(SchemeLikeLParser.PSTART);
	            this.state = 277;
	            this.varPairExpr();
	            this.state = 278;
	            this.match(SchemeLikeLParser.PEND);
	            this.state = 281;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 280;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 287;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 288;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 290;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        if(la_===1) {
	            this.state = 289;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	        this.state = 292;
	        this.fncBodyExpr();
	        this.state = 294;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 293;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 296;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 298;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 297;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varPairExpr() {
	    let localctx = new VarPairExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SchemeLikeLParser.RULE_varPairExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 301;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 300;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 303;
	        this.identifier();
	        this.state = 314;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 304;
	            this.expr();
	            break;

	        case 2:
	            this.state = 305;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 306;
	            this.literal();
	            break;

	        case 3:
	            this.state = 307;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 308;
	            this.identifier();
	            break;

	        case 4:
	            this.state = 309;
	            this.callFnc();
	            break;

	        case 5:
	            this.state = 310;
	            this.vectorExpr();
	            break;

	        case 6:
	            this.state = 311;
	            this.listExpr();
	            break;

	        case 7:
	            this.state = 312;
	            this.uniExpr();
	            break;

	        case 8:
	            this.state = 313;
	            this.biExpr();
	            break;

	        }
	        this.state = 317;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        if(la_===1) {
	            this.state = 316;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	beginExpr() {
	    let localctx = new BeginExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SchemeLikeLParser.RULE_beginExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 320;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 319;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 322;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 324;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 323;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 326;
	        this.match(SchemeLikeLParser.T__3);
	        this.state = 342;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 340;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 327;
	                    this.expr();
	                    break;

	                case 2:
	                    this.state = 328;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 329;
	                    this.literal();
	                    break;

	                case 3:
	                    this.state = 330;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 331;
	                    this.identifier();
	                    break;

	                case 4:
	                    this.state = 332;
	                    this.callFnc();
	                    break;

	                case 5:
	                    this.state = 333;
	                    this.setExpr();
	                    break;

	                case 6:
	                    this.state = 334;
	                    this.displayExpr();
	                    break;

	                case 7:
	                    this.state = 335;
	                    this.ifExpr();
	                    break;

	                case 8:
	                    this.state = 336;
	                    this.vectorExpr();
	                    break;

	                case 9:
	                    this.state = 337;
	                    this.listExpr();
	                    break;

	                case 10:
	                    this.state = 338;
	                    this.uniExpr();
	                    break;

	                case 11:
	                    this.state = 339;
	                    this.biExpr();
	                    break;

	                } 
	            }
	            this.state = 344;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
	        }

	        this.state = 346;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 345;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 348;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 350;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        if(la_===1) {
	            this.state = 349;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	biExpr() {
	    let localctx = new BiExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SchemeLikeLParser.RULE_biExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 353;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 352;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 355;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 356;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 359;
	        this.biOperatorExpr();
	        this.state = 372;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 360;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 361;
	            this.expr();
	            break;

	        case 3:
	            this.state = 362;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 363;
	            this.literal();
	            break;

	        case 4:
	            this.state = 364;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 365;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 366;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 367;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 368;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 369;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 370;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 371;
	            this.listExpr();
	            break;

	        }
	        this.state = 386;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 374;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 375;
	            this.expr();
	            break;

	        case 3:
	            this.state = 376;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 377;
	            this.literal();
	            break;

	        case 4:
	            this.state = 378;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 379;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 380;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 381;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 382;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 383;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 384;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 385;
	            this.listExpr();
	            break;

	        }
	        this.state = 389;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 388;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 391;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 393;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        if(la_===1) {
	            this.state = 392;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logBiExpr() {
	    let localctx = new LogBiExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SchemeLikeLParser.RULE_logBiExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 396;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 395;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 398;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 400;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 399;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 402;
	        this.logBiOperatorExpr();
	        this.state = 415;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 403;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 404;
	            this.expr();
	            break;

	        case 3:
	            this.state = 405;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 406;
	            this.literal();
	            break;

	        case 4:
	            this.state = 407;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 408;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 409;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 410;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 411;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 412;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 413;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 414;
	            this.listExpr();
	            break;

	        }
	        this.state = 429;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 417;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 418;
	            this.expr();
	            break;

	        case 3:
	            this.state = 419;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 420;
	            this.literal();
	            break;

	        case 4:
	            this.state = 421;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 422;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 423;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 424;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 425;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 426;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 427;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 428;
	            this.listExpr();
	            break;

	        }
	        this.state = 432;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 431;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 434;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 436;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        if(la_===1) {
	            this.state = 435;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniExpr() {
	    let localctx = new UniExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SchemeLikeLParser.RULE_uniExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 439;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 438;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 441;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 443;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 442;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 445;
	        this.uniOperatorExpr();
	        this.state = 458;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 446;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 447;
	            this.expr();
	            break;

	        case 3:
	            this.state = 448;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 449;
	            this.literal();
	            break;

	        case 4:
	            this.state = 450;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 451;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 452;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 453;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 454;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 455;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 456;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 457;
	            this.listExpr();
	            break;

	        }
	        this.state = 461;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 460;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 463;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 465;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        if(la_===1) {
	            this.state = 464;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logUniExpr() {
	    let localctx = new LogUniExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SchemeLikeLParser.RULE_logUniExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 468;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 467;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 470;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 472;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 471;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 474;
	        this.logUniOperatorExpr();
	        this.state = 487;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 475;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 476;
	            this.expr();
	            break;

	        case 3:
	            this.state = 477;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 478;
	            this.literal();
	            break;

	        case 4:
	            this.state = 479;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 480;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 481;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 482;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 483;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 484;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 485;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 486;
	            this.listExpr();
	            break;

	        }
	        this.state = 490;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 489;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 492;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 494;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        if(la_===1) {
	            this.state = 493;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callFnc() {
	    let localctx = new CallFncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SchemeLikeLParser.RULE_callFnc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 497;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 496;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 499;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 501;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 500;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 503;
	        this.identifier();
	        this.state = 519;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 517;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 504;
	                    this.biExpr();
	                    break;

	                case 2:
	                    this.state = 505;
	                    this.expr();
	                    break;

	                case 3:
	                    this.state = 506;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 507;
	                    this.literal();
	                    break;

	                case 4:
	                    this.state = 508;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 509;
	                    this.identifier();
	                    break;

	                case 5:
	                    this.state = 510;
	                    this.callFnc();
	                    break;

	                case 6:
	                    this.state = 511;
	                    this.uniExpr();
	                    break;

	                case 7:
	                    this.state = 512;
	                    this.beginExpr();
	                    break;

	                case 8:
	                    this.state = 513;
	                    this.ifExpr();
	                    break;

	                case 9:
	                    this.state = 514;
	                    this.vectorExpr();
	                    break;

	                case 10:
	                    this.state = 515;
	                    this.listExpr();
	                    break;

	                case 11:
	                    this.state = 516;
	                    this.callLambdaFnc();
	                    break;

	                } 
	            }
	            this.state = 521;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
	        }

	        this.state = 523;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 522;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 525;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 527;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        if(la_===1) {
	            this.state = 526;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callLambdaFnc() {
	    let localctx = new CallLambdaFncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SchemeLikeLParser.RULE_callLambdaFnc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 530;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 529;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 532;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 534;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 533;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 536;
	        this.match(SchemeLikeLParser.T__1);
	        this.state = 538;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 537;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 540;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 542;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        if(la_===1) {
	            this.state = 541;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	        this.state = 545;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 544;
	            this.identifier();
	        }

	        this.state = 551;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 547;
	                this.match(SchemeLikeLParser.SPACE);
	                this.state = 548;
	                this.identifier(); 
	            }
	            this.state = 553;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
	        }

	        this.state = 555;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 554;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 557;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 559;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        if(la_===1) {
	            this.state = 558;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	        this.state = 568; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 563;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 561;
	                this.expr();
	                break;

	            case 2:
	                this.state = 562;
	                this.callFnc();
	                break;

	            }
	            this.state = 566;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	            if(la_===1) {
	                this.state = 565;
	                this.match(SchemeLikeLParser.SPACE);

	            }
	            this.state = 570; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===18 || _la===20);
	        this.state = 572;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 574;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	        if(la_===1) {
	            this.state = 573;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifExpr() {
	    let localctx = new IfExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SchemeLikeLParser.RULE_ifExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 577;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 576;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 579;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 581;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 580;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 583;
	        this.match(SchemeLikeLParser.T__4);
	        this.state = 599;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 584;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 585;
	            this.expr();
	            break;

	        case 3:
	            this.state = 586;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 587;
	            this.literal();
	            break;

	        case 4:
	            this.state = 588;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 589;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 590;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 591;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 592;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 593;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 594;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 595;
	            this.listExpr();
	            break;

	        case 11:
	            this.state = 596;
	            this.logExpr();
	            break;

	        case 12:
	            this.state = 597;
	            this.logBiExpr();
	            break;

	        case 13:
	            this.state = 598;
	            this.logUniExpr();
	            break;

	        }
	        this.state = 602;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        if(la_===1) {
	            this.state = 601;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	        this.state = 618;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 604;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 605;
	            this.expr();
	            break;

	        case 3:
	            this.state = 606;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 607;
	            this.literal();
	            break;

	        case 4:
	            this.state = 608;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 609;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 610;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 611;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 612;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 613;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 614;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 615;
	            this.listExpr();
	            break;

	        case 11:
	            this.state = 616;
	            this.setExpr();
	            break;

	        case 12:
	            this.state = 617;
	            this.displayExpr();
	            break;

	        }
	        this.state = 634;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        if(la_===1) {
	            this.state = 620;
	            this.biExpr();

	        } else if(la_===2) {
	            this.state = 621;
	            this.expr();

	        } else if(la_===3) {
	            this.state = 622;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 623;
	            this.literal();

	        } else if(la_===4) {
	            this.state = 624;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 625;
	            this.identifier();

	        } else if(la_===5) {
	            this.state = 626;
	            this.callFnc();

	        } else if(la_===6) {
	            this.state = 627;
	            this.uniExpr();

	        } else if(la_===7) {
	            this.state = 628;
	            this.beginExpr();

	        } else if(la_===8) {
	            this.state = 629;
	            this.ifExpr();

	        } else if(la_===9) {
	            this.state = 630;
	            this.vectorExpr();

	        } else if(la_===10) {
	            this.state = 631;
	            this.listExpr();

	        } else if(la_===11) {
	            this.state = 632;
	            this.setExpr();

	        } else if(la_===12) {
	            this.state = 633;
	            this.displayExpr();

	        }
	        this.state = 637;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 636;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 639;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 641;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        if(la_===1) {
	            this.state = 640;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operatorExpr() {
	    let localctx = new OperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SchemeLikeLParser.RULE_operatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 643;
	        this.match(SchemeLikeLParser.OPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logOperatorExpr() {
	    let localctx = new LogOperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SchemeLikeLParser.RULE_logOperatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 645;
	        this.match(SchemeLikeLParser.LOGOPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	biOperatorExpr() {
	    let localctx = new BiOperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SchemeLikeLParser.RULE_biOperatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 647;
	        this.match(SchemeLikeLParser.BIOPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logBiOperatorExpr() {
	    let localctx = new LogBiOperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SchemeLikeLParser.RULE_logBiOperatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 649;
	        this.match(SchemeLikeLParser.LOGBIOPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniOperatorExpr() {
	    let localctx = new UniOperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SchemeLikeLParser.RULE_uniOperatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 651;
	        this.match(SchemeLikeLParser.UNIOPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logUniOperatorExpr() {
	    let localctx = new LogUniOperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SchemeLikeLParser.RULE_logUniOperatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 653;
	        this.match(SchemeLikeLParser.LOGUNIOPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setExpr() {
	    let localctx = new SetExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SchemeLikeLParser.RULE_setExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 656;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 655;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 658;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 660;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 659;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 662;
	        this.match(SchemeLikeLParser.T__5);
	        this.state = 663;
	        this.match(SchemeLikeLParser.SPACE);
	        this.state = 664;
	        this.varPairExpr();
	        this.state = 666;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 665;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 668;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 670;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        if(la_===1) {
	            this.state = 669;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vectorExpr() {
	    let localctx = new VectorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SchemeLikeLParser.RULE_vectorExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 673;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 672;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 675;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 677;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 676;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 679;
	        this.match(SchemeLikeLParser.T__6);
	        this.state = 692;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,113,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 690;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 680;
	                    this.biExpr();
	                    break;

	                case 2:
	                    this.state = 681;
	                    this.expr();
	                    break;

	                case 3:
	                    this.state = 682;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 683;
	                    this.literal();
	                    break;

	                case 4:
	                    this.state = 684;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 685;
	                    this.identifier();
	                    break;

	                case 5:
	                    this.state = 686;
	                    this.callFnc();
	                    break;

	                case 6:
	                    this.state = 687;
	                    this.uniExpr();
	                    break;

	                case 7:
	                    this.state = 688;
	                    this.beginExpr();
	                    break;

	                case 8:
	                    this.state = 689;
	                    this.ifExpr();
	                    break;

	                } 
	            }
	            this.state = 694;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,113,this._ctx);
	        }

	        this.state = 696;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 695;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 698;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 700;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        if(la_===1) {
	            this.state = 699;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listExpr() {
	    let localctx = new ListExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SchemeLikeLParser.RULE_listExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 703;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 702;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 705;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 707;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 706;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 709;
	        this.match(SchemeLikeLParser.T__7);
	        this.state = 724;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 722;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 710;
	                    this.biExpr();
	                    break;

	                case 2:
	                    this.state = 711;
	                    this.expr();
	                    break;

	                case 3:
	                    this.state = 712;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 713;
	                    this.literal();
	                    break;

	                case 4:
	                    this.state = 714;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 715;
	                    this.identifier();
	                    break;

	                case 5:
	                    this.state = 716;
	                    this.callFnc();
	                    break;

	                case 6:
	                    this.state = 717;
	                    this.uniExpr();
	                    break;

	                case 7:
	                    this.state = 718;
	                    this.beginExpr();
	                    break;

	                case 8:
	                    this.state = 719;
	                    this.ifExpr();
	                    break;

	                case 9:
	                    this.state = 720;
	                    this.vectorExpr();
	                    break;

	                case 10:
	                    this.state = 721;
	                    this.listExpr();
	                    break;

	                } 
	            }
	            this.state = 726;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
	        }

	        this.state = 728;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 727;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 730;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 732;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        if(la_===1) {
	            this.state = 731;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	displayExpr() {
	    let localctx = new DisplayExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SchemeLikeLParser.RULE_displayExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 735;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 734;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 737;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 739;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 738;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 741;
	        this.match(SchemeLikeLParser.T__8);
	        this.state = 754;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 742;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 743;
	            this.expr();
	            break;

	        case 3:
	            this.state = 744;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 745;
	            this.literal();
	            break;

	        case 4:
	            this.state = 746;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 747;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 748;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 749;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 750;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 751;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 752;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 753;
	            this.listExpr();
	            break;

	        }
	        this.state = 757;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 756;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 759;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 761;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        if(la_===1) {
	            this.state = 760;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportExpr() {
	    let localctx = new ExportExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SchemeLikeLParser.RULE_exportExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 764;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 763;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 766;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 768;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 767;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 770;
	        this.match(SchemeLikeLParser.T__9);
	        this.state = 771;
	        this.match(SchemeLikeLParser.SPACE);
	        this.state = 772;
	        this.identifier();
	        this.state = 774;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 773;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 776;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 778;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
	        if(la_===1) {
	            this.state = 777;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SchemeLikeLParser.RULE_literal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 780;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 31457280) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SchemeLikeLParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 782;
	        this.match(SchemeLikeLParser.VARIABLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SchemeLikeLParser.EOF = antlr4.Token.EOF;
SchemeLikeLParser.T__0 = 1;
SchemeLikeLParser.T__1 = 2;
SchemeLikeLParser.T__2 = 3;
SchemeLikeLParser.T__3 = 4;
SchemeLikeLParser.T__4 = 5;
SchemeLikeLParser.T__5 = 6;
SchemeLikeLParser.T__6 = 7;
SchemeLikeLParser.T__7 = 8;
SchemeLikeLParser.T__8 = 9;
SchemeLikeLParser.T__9 = 10;
SchemeLikeLParser.OPERATOR = 11;
SchemeLikeLParser.LOGOPERATOR = 12;
SchemeLikeLParser.BIOPERATOR = 13;
SchemeLikeLParser.LOGBIOPERATOR = 14;
SchemeLikeLParser.UNIOPERATOR = 15;
SchemeLikeLParser.LOGUNIOPERATOR = 16;
SchemeLikeLParser.VARIABLE = 17;
SchemeLikeLParser.PSTART = 18;
SchemeLikeLParser.PEND = 19;
SchemeLikeLParser.SPACE = 20;
SchemeLikeLParser.FLOAT = 21;
SchemeLikeLParser.INT = 22;
SchemeLikeLParser.NFLOAT = 23;
SchemeLikeLParser.NINT = 24;
SchemeLikeLParser.WS = 25;

SchemeLikeLParser.RULE_start = 0;
SchemeLikeLParser.RULE_expr = 1;
SchemeLikeLParser.RULE_logExpr = 2;
SchemeLikeLParser.RULE_defineGlobalVar = 3;
SchemeLikeLParser.RULE_defineFnc = 4;
SchemeLikeLParser.RULE_fncBodyExpr = 5;
SchemeLikeLParser.RULE_localFncBodyExpr = 6;
SchemeLikeLParser.RULE_varPairExpr = 7;
SchemeLikeLParser.RULE_beginExpr = 8;
SchemeLikeLParser.RULE_biExpr = 9;
SchemeLikeLParser.RULE_logBiExpr = 10;
SchemeLikeLParser.RULE_uniExpr = 11;
SchemeLikeLParser.RULE_logUniExpr = 12;
SchemeLikeLParser.RULE_callFnc = 13;
SchemeLikeLParser.RULE_callLambdaFnc = 14;
SchemeLikeLParser.RULE_ifExpr = 15;
SchemeLikeLParser.RULE_operatorExpr = 16;
SchemeLikeLParser.RULE_logOperatorExpr = 17;
SchemeLikeLParser.RULE_biOperatorExpr = 18;
SchemeLikeLParser.RULE_logBiOperatorExpr = 19;
SchemeLikeLParser.RULE_uniOperatorExpr = 20;
SchemeLikeLParser.RULE_logUniOperatorExpr = 21;
SchemeLikeLParser.RULE_setExpr = 22;
SchemeLikeLParser.RULE_vectorExpr = 23;
SchemeLikeLParser.RULE_listExpr = 24;
SchemeLikeLParser.RULE_displayExpr = 25;
SchemeLikeLParser.RULE_exportExpr = 26;
SchemeLikeLParser.RULE_literal = 27;
SchemeLikeLParser.RULE_identifier = 28;

class StartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_start;
    }

	EOF() {
	    return this.getToken(SchemeLikeLParser.EOF, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	defineGlobalVar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefineGlobalVarContext);
	    } else {
	        return this.getTypedRuleContext(DefineGlobalVarContext,i);
	    }
	};

	defineFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefineFncContext);
	    } else {
	        return this.getTypedRuleContext(DefineFncContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	setExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetExprContext);
	    } else {
	        return this.getTypedRuleContext(SetExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	displayExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisplayExprContext);
	    } else {
	        return this.getTypedRuleContext(DisplayExprContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	exportExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExportExprContext);
	    } else {
	        return this.getTypedRuleContext(ExportExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitStart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitStart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_expr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	operatorExpr() {
	    return this.getTypedRuleContext(OperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	logOperatorExpr() {
	    return this.getTypedRuleContext(LogOperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	logUniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogUniExprContext);
	    } else {
	        return this.getTypedRuleContext(LogUniExprContext,i);
	    }
	};

	logBiExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogBiExprContext);
	    } else {
	        return this.getTypedRuleContext(LogBiExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefineGlobalVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_defineGlobalVar;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	callFnc() {
	    return this.getTypedRuleContext(CallFncContext,0);
	};

	vectorExpr() {
	    return this.getTypedRuleContext(VectorExprContext,0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	uniExpr() {
	    return this.getTypedRuleContext(UniExprContext,0);
	};

	biExpr() {
	    return this.getTypedRuleContext(BiExprContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterDefineGlobalVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitDefineGlobalVar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitDefineGlobalVar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefineFncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_defineFnc;
    }

	PSTART = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PSTART);
	    } else {
	        return this.getToken(SchemeLikeLParser.PSTART, i);
	    }
	};


	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	PEND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PEND);
	    } else {
	        return this.getToken(SchemeLikeLParser.PEND, i);
	    }
	};


	fncBodyExpr() {
	    return this.getTypedRuleContext(FncBodyExprContext,0);
	};

	localFncBodyExpr() {
	    return this.getTypedRuleContext(LocalFncBodyExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterDefineFnc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitDefineFnc(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitDefineFnc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FncBodyExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_fncBodyExpr;
    }

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	setExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetExprContext);
	    } else {
	        return this.getTypedRuleContext(SetExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	displayExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisplayExprContext);
	    } else {
	        return this.getTypedRuleContext(DisplayExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterFncBodyExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitFncBodyExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitFncBodyExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalFncBodyExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_localFncBodyExpr;
    }

	PSTART = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PSTART);
	    } else {
	        return this.getToken(SchemeLikeLParser.PSTART, i);
	    }
	};


	PEND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PEND);
	    } else {
	        return this.getToken(SchemeLikeLParser.PEND, i);
	    }
	};


	fncBodyExpr() {
	    return this.getTypedRuleContext(FncBodyExprContext,0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	varPairExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VarPairExprContext);
	    } else {
	        return this.getTypedRuleContext(VarPairExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLocalFncBodyExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLocalFncBodyExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLocalFncBodyExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarPairExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_varPairExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	callFnc() {
	    return this.getTypedRuleContext(CallFncContext,0);
	};

	vectorExpr() {
	    return this.getTypedRuleContext(VectorExprContext,0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	uniExpr() {
	    return this.getTypedRuleContext(UniExprContext,0);
	};

	biExpr() {
	    return this.getTypedRuleContext(BiExprContext,0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterVarPairExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitVarPairExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitVarPairExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BeginExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_beginExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	setExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetExprContext);
	    } else {
	        return this.getTypedRuleContext(SetExprContext,i);
	    }
	};

	displayExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisplayExprContext);
	    } else {
	        return this.getTypedRuleContext(DisplayExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterBeginExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitBeginExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitBeginExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BiExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_biExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	biOperatorExpr() {
	    return this.getTypedRuleContext(BiOperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterBiExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitBiExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitBiExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogBiExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logBiExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	logBiOperatorExpr() {
	    return this.getTypedRuleContext(LogBiOperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogBiExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogBiExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogBiExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UniExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_uniExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	uniOperatorExpr() {
	    return this.getTypedRuleContext(UniOperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr() {
	    return this.getTypedRuleContext(BiExprContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	callFnc() {
	    return this.getTypedRuleContext(CallFncContext,0);
	};

	uniExpr() {
	    return this.getTypedRuleContext(UniExprContext,0);
	};

	beginExpr() {
	    return this.getTypedRuleContext(BeginExprContext,0);
	};

	ifExpr() {
	    return this.getTypedRuleContext(IfExprContext,0);
	};

	vectorExpr() {
	    return this.getTypedRuleContext(VectorExprContext,0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterUniExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitUniExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitUniExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogUniExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logUniExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	logUniOperatorExpr() {
	    return this.getTypedRuleContext(LogUniOperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr() {
	    return this.getTypedRuleContext(BiExprContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	callFnc() {
	    return this.getTypedRuleContext(CallFncContext,0);
	};

	uniExpr() {
	    return this.getTypedRuleContext(UniExprContext,0);
	};

	beginExpr() {
	    return this.getTypedRuleContext(BeginExprContext,0);
	};

	ifExpr() {
	    return this.getTypedRuleContext(IfExprContext,0);
	};

	vectorExpr() {
	    return this.getTypedRuleContext(VectorExprContext,0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogUniExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogUniExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogUniExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CallFncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_callFnc;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	callLambdaFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallLambdaFncContext);
	    } else {
	        return this.getTypedRuleContext(CallLambdaFncContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterCallFnc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitCallFnc(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitCallFnc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CallLambdaFncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_callLambdaFnc;
    }

	PSTART = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PSTART);
	    } else {
	        return this.getToken(SchemeLikeLParser.PSTART, i);
	    }
	};


	PEND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PEND);
	    } else {
	        return this.getToken(SchemeLikeLParser.PEND, i);
	    }
	};


	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterCallLambdaFnc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitCallLambdaFnc(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitCallLambdaFnc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_ifExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	logExpr() {
	    return this.getTypedRuleContext(LogExprContext,0);
	};

	logBiExpr() {
	    return this.getTypedRuleContext(LogBiExprContext,0);
	};

	logUniExpr() {
	    return this.getTypedRuleContext(LogUniExprContext,0);
	};

	setExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetExprContext);
	    } else {
	        return this.getTypedRuleContext(SetExprContext,i);
	    }
	};

	displayExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisplayExprContext);
	    } else {
	        return this.getTypedRuleContext(DisplayExprContext,i);
	    }
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterIfExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitIfExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitIfExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_operatorExpr;
    }

	OPERATOR() {
	    return this.getToken(SchemeLikeLParser.OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogOperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logOperatorExpr;
    }

	LOGOPERATOR() {
	    return this.getToken(SchemeLikeLParser.LOGOPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BiOperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_biOperatorExpr;
    }

	BIOPERATOR() {
	    return this.getToken(SchemeLikeLParser.BIOPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterBiOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitBiOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitBiOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogBiOperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logBiOperatorExpr;
    }

	LOGBIOPERATOR() {
	    return this.getToken(SchemeLikeLParser.LOGBIOPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogBiOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogBiOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogBiOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UniOperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_uniOperatorExpr;
    }

	UNIOPERATOR() {
	    return this.getToken(SchemeLikeLParser.UNIOPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterUniOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitUniOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitUniOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogUniOperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logUniOperatorExpr;
    }

	LOGUNIOPERATOR() {
	    return this.getToken(SchemeLikeLParser.LOGUNIOPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogUniOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogUniOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogUniOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_setExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	varPairExpr() {
	    return this.getTypedRuleContext(VarPairExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterSetExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitSetExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitSetExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VectorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_vectorExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterVectorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitVectorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitVectorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_listExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterListExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitListExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitListExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DisplayExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_displayExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr() {
	    return this.getTypedRuleContext(BiExprContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	callFnc() {
	    return this.getTypedRuleContext(CallFncContext,0);
	};

	uniExpr() {
	    return this.getTypedRuleContext(UniExprContext,0);
	};

	beginExpr() {
	    return this.getTypedRuleContext(BeginExprContext,0);
	};

	ifExpr() {
	    return this.getTypedRuleContext(IfExprContext,0);
	};

	vectorExpr() {
	    return this.getTypedRuleContext(VectorExprContext,0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterDisplayExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitDisplayExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitDisplayExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExportExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_exportExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterExportExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitExportExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitExportExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_literal;
    }

	FLOAT() {
	    return this.getToken(SchemeLikeLParser.FLOAT, 0);
	};

	INT() {
	    return this.getToken(SchemeLikeLParser.INT, 0);
	};

	NFLOAT() {
	    return this.getToken(SchemeLikeLParser.NFLOAT, 0);
	};

	NINT() {
	    return this.getToken(SchemeLikeLParser.NINT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_identifier;
    }

	VARIABLE() {
	    return this.getToken(SchemeLikeLParser.VARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




SchemeLikeLParser.StartContext = StartContext; 
SchemeLikeLParser.ExprContext = ExprContext; 
SchemeLikeLParser.LogExprContext = LogExprContext; 
SchemeLikeLParser.DefineGlobalVarContext = DefineGlobalVarContext; 
SchemeLikeLParser.DefineFncContext = DefineFncContext; 
SchemeLikeLParser.FncBodyExprContext = FncBodyExprContext; 
SchemeLikeLParser.LocalFncBodyExprContext = LocalFncBodyExprContext; 
SchemeLikeLParser.VarPairExprContext = VarPairExprContext; 
SchemeLikeLParser.BeginExprContext = BeginExprContext; 
SchemeLikeLParser.BiExprContext = BiExprContext; 
SchemeLikeLParser.LogBiExprContext = LogBiExprContext; 
SchemeLikeLParser.UniExprContext = UniExprContext; 
SchemeLikeLParser.LogUniExprContext = LogUniExprContext; 
SchemeLikeLParser.CallFncContext = CallFncContext; 
SchemeLikeLParser.CallLambdaFncContext = CallLambdaFncContext; 
SchemeLikeLParser.IfExprContext = IfExprContext; 
SchemeLikeLParser.OperatorExprContext = OperatorExprContext; 
SchemeLikeLParser.LogOperatorExprContext = LogOperatorExprContext; 
SchemeLikeLParser.BiOperatorExprContext = BiOperatorExprContext; 
SchemeLikeLParser.LogBiOperatorExprContext = LogBiOperatorExprContext; 
SchemeLikeLParser.UniOperatorExprContext = UniOperatorExprContext; 
SchemeLikeLParser.LogUniOperatorExprContext = LogUniOperatorExprContext; 
SchemeLikeLParser.SetExprContext = SetExprContext; 
SchemeLikeLParser.VectorExprContext = VectorExprContext; 
SchemeLikeLParser.ListExprContext = ListExprContext; 
SchemeLikeLParser.DisplayExprContext = DisplayExprContext; 
SchemeLikeLParser.ExportExprContext = ExportExprContext; 
SchemeLikeLParser.LiteralContext = LiteralContext; 
SchemeLikeLParser.IdentifierContext = IdentifierContext; 
