// Generated from SchemeLikeL.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from './antlr4/index.web.js';
import SchemeLikeLListener from './SchemeLikeLListener.js';
import SchemeLikeLVisitor from './SchemeLikeLVisitor.js';

const serializedATN = [4,1,24,762,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,1,0,3,0,58,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,4,0,
72,8,0,11,0,12,0,73,1,0,1,0,1,1,3,1,79,8,1,1,1,1,1,3,1,83,8,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,98,8,1,11,1,12,1,99,1,1,3,
1,103,8,1,1,1,1,1,3,1,107,8,1,1,2,3,2,110,8,2,1,2,1,2,3,2,114,8,2,1,2,1,
2,1,2,4,2,119,8,2,11,2,12,2,120,1,2,3,2,124,8,2,1,2,1,2,3,2,128,8,2,1,3,
3,3,131,8,3,1,3,1,3,3,3,135,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,3,3,150,8,3,1,3,3,3,153,8,3,1,3,1,3,3,3,157,8,3,1,4,3,4,160,
8,4,1,4,1,4,3,4,164,8,4,1,4,1,4,3,4,168,8,4,1,4,1,4,3,4,172,8,4,1,4,1,4,
1,4,5,4,177,8,4,10,4,12,4,180,9,4,1,4,3,4,183,8,4,1,4,1,4,1,4,3,4,188,8,
4,1,4,1,4,1,4,1,4,3,4,194,8,4,1,4,1,4,3,4,198,8,4,1,4,1,4,3,4,202,8,4,1,
4,1,4,3,4,206,8,4,1,4,3,4,209,8,4,1,4,1,4,5,4,213,8,4,10,4,12,4,216,9,4,
1,4,3,4,219,8,4,1,4,1,4,3,4,223,8,4,1,4,1,4,1,4,1,4,3,4,229,8,4,1,5,3,5,
232,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,248,
8,5,10,5,12,5,251,9,5,1,5,3,5,254,8,5,1,6,3,6,257,8,6,1,6,1,6,3,6,261,8,
6,1,6,1,6,3,6,265,8,6,1,6,1,6,3,6,269,8,6,1,6,1,6,1,6,1,6,1,6,3,6,276,8,
6,5,6,278,8,6,10,6,12,6,281,9,6,1,6,1,6,3,6,285,8,6,1,6,1,6,3,6,289,8,6,
1,6,1,6,3,6,293,8,6,1,7,3,7,296,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
1,7,1,7,3,7,309,8,7,1,7,3,7,312,8,7,1,8,3,8,315,8,8,1,8,1,8,3,8,319,8,8,
1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,335,8,8,10,8,
12,8,338,9,8,1,8,3,8,341,8,8,1,8,1,8,3,8,345,8,8,1,9,3,9,348,8,9,1,9,1,9,
3,9,352,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,367,
8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,381,8,9,1,9,3,9,
384,8,9,1,9,1,9,3,9,388,8,9,1,10,3,10,391,8,10,1,10,1,10,3,10,395,8,10,1,
10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,410,
8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,424,
8,10,1,10,3,10,427,8,10,1,10,1,10,3,10,431,8,10,1,11,3,11,434,8,11,1,11,
1,11,3,11,438,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
1,11,1,11,3,11,453,8,11,1,11,3,11,456,8,11,1,11,1,11,3,11,460,8,11,1,12,
3,12,463,8,12,1,12,1,12,3,12,467,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
1,12,1,12,1,12,1,12,1,12,1,12,3,12,482,8,12,1,12,3,12,485,8,12,1,12,1,12,
3,12,489,8,12,1,13,3,13,492,8,13,1,13,1,13,3,13,496,8,13,1,13,1,13,1,13,
1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,512,8,13,10,
13,12,13,515,9,13,1,13,3,13,518,8,13,1,13,1,13,3,13,522,8,13,1,14,3,14,525,
8,14,1,14,1,14,3,14,529,8,14,1,14,1,14,3,14,533,8,14,1,14,1,14,3,14,537,
8,14,1,14,3,14,540,8,14,1,14,1,14,5,14,544,8,14,10,14,12,14,547,9,14,1,14,
3,14,550,8,14,1,14,1,14,3,14,554,8,14,1,14,1,14,3,14,558,8,14,1,14,3,14,
561,8,14,4,14,563,8,14,11,14,12,14,564,1,14,1,14,3,14,569,8,14,1,15,3,15,
572,8,15,1,15,1,15,3,15,576,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,594,8,15,1,15,3,15,597,8,15,
1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,
15,613,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
1,15,1,15,3,15,629,8,15,1,15,3,15,632,8,15,1,15,1,15,3,15,636,8,15,1,16,
1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,3,22,651,8,22,
1,22,1,22,3,22,655,8,22,1,22,1,22,1,22,1,22,3,22,661,8,22,1,22,1,22,3,22,
665,8,22,1,23,3,23,668,8,23,1,23,1,23,3,23,672,8,23,1,23,1,23,1,23,1,23,
1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,685,8,23,10,23,12,23,688,9,23,1,
23,3,23,691,8,23,1,23,1,23,3,23,695,8,23,1,24,3,24,698,8,24,1,24,1,24,3,
24,702,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
1,24,5,24,717,8,24,10,24,12,24,720,9,24,1,24,3,24,723,8,24,1,24,1,24,3,24,
727,8,24,1,25,3,25,730,8,25,1,25,1,25,3,25,734,8,25,1,25,1,25,1,25,1,25,
1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,749,8,25,1,25,3,25,752,
8,25,1,25,1,25,3,25,756,8,25,1,26,1,26,1,27,1,27,1,27,0,0,28,0,2,4,6,8,10,
12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,0,1,1,
0,20,23,1020,0,57,1,0,0,0,2,78,1,0,0,0,4,109,1,0,0,0,6,130,1,0,0,0,8,159,
1,0,0,0,10,231,1,0,0,0,12,256,1,0,0,0,14,295,1,0,0,0,16,314,1,0,0,0,18,347,
1,0,0,0,20,390,1,0,0,0,22,433,1,0,0,0,24,462,1,0,0,0,26,491,1,0,0,0,28,524,
1,0,0,0,30,571,1,0,0,0,32,637,1,0,0,0,34,639,1,0,0,0,36,641,1,0,0,0,38,643,
1,0,0,0,40,645,1,0,0,0,42,647,1,0,0,0,44,650,1,0,0,0,46,667,1,0,0,0,48,697,
1,0,0,0,50,729,1,0,0,0,52,757,1,0,0,0,54,759,1,0,0,0,56,58,5,19,0,0,57,56,
1,0,0,0,57,58,1,0,0,0,58,71,1,0,0,0,59,72,3,2,1,0,60,72,3,6,3,0,61,72,3,
8,4,0,62,72,3,52,26,0,63,72,3,54,27,0,64,72,3,26,13,0,65,72,3,44,22,0,66,
72,3,48,24,0,67,72,3,46,23,0,68,72,3,50,25,0,69,72,3,22,11,0,70,72,3,30,
15,0,71,59,1,0,0,0,71,60,1,0,0,0,71,61,1,0,0,0,71,62,1,0,0,0,71,63,1,0,0,
0,71,64,1,0,0,0,71,65,1,0,0,0,71,66,1,0,0,0,71,67,1,0,0,0,71,68,1,0,0,0,
71,69,1,0,0,0,71,70,1,0,0,0,72,73,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,
75,1,0,0,0,75,76,5,0,0,1,76,1,1,0,0,0,77,79,5,19,0,0,78,77,1,0,0,0,78,79,
1,0,0,0,79,80,1,0,0,0,80,82,5,17,0,0,81,83,5,19,0,0,82,81,1,0,0,0,82,83,
1,0,0,0,83,84,1,0,0,0,84,97,3,32,16,0,85,98,3,18,9,0,86,98,3,2,1,0,87,88,
5,19,0,0,88,98,3,52,26,0,89,90,5,19,0,0,90,98,3,54,27,0,91,98,3,26,13,0,
92,98,3,22,11,0,93,98,3,16,8,0,94,98,3,30,15,0,95,98,3,46,23,0,96,98,3,48,
24,0,97,85,1,0,0,0,97,86,1,0,0,0,97,87,1,0,0,0,97,89,1,0,0,0,97,91,1,0,0,
0,97,92,1,0,0,0,97,93,1,0,0,0,97,94,1,0,0,0,97,95,1,0,0,0,97,96,1,0,0,0,
98,99,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,102,1,0,0,0,101,103,5,19,
0,0,102,101,1,0,0,0,102,103,1,0,0,0,103,104,1,0,0,0,104,106,5,18,0,0,105,
107,5,19,0,0,106,105,1,0,0,0,106,107,1,0,0,0,107,3,1,0,0,0,108,110,5,19,
0,0,109,108,1,0,0,0,109,110,1,0,0,0,110,111,1,0,0,0,111,113,5,17,0,0,112,
114,5,19,0,0,113,112,1,0,0,0,113,114,1,0,0,0,114,115,1,0,0,0,115,118,3,34,
17,0,116,119,3,24,12,0,117,119,3,20,10,0,118,116,1,0,0,0,118,117,1,0,0,0,
119,120,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,123,1,0,0,0,122,124,
5,19,0,0,123,122,1,0,0,0,123,124,1,0,0,0,124,125,1,0,0,0,125,127,5,18,0,
0,126,128,5,19,0,0,127,126,1,0,0,0,127,128,1,0,0,0,128,5,1,0,0,0,129,131,
5,19,0,0,130,129,1,0,0,0,130,131,1,0,0,0,131,132,1,0,0,0,132,134,5,17,0,
0,133,135,5,19,0,0,134,133,1,0,0,0,134,135,1,0,0,0,135,136,1,0,0,0,136,137,
5,1,0,0,137,138,5,19,0,0,138,149,3,54,27,0,139,140,5,19,0,0,140,150,3,54,
27,0,141,142,5,19,0,0,142,150,3,52,26,0,143,150,3,2,1,0,144,150,3,26,13,
0,145,150,3,46,23,0,146,150,3,48,24,0,147,150,3,22,11,0,148,150,3,18,9,0,
149,139,1,0,0,0,149,141,1,0,0,0,149,143,1,0,0,0,149,144,1,0,0,0,149,145,
1,0,0,0,149,146,1,0,0,0,149,147,1,0,0,0,149,148,1,0,0,0,150,152,1,0,0,0,
151,153,5,19,0,0,152,151,1,0,0,0,152,153,1,0,0,0,153,154,1,0,0,0,154,156,
5,18,0,0,155,157,5,19,0,0,156,155,1,0,0,0,156,157,1,0,0,0,157,7,1,0,0,0,
158,160,5,19,0,0,159,158,1,0,0,0,159,160,1,0,0,0,160,161,1,0,0,0,161,163,
5,17,0,0,162,164,5,19,0,0,163,162,1,0,0,0,163,164,1,0,0,0,164,165,1,0,0,
0,165,167,5,1,0,0,166,168,5,19,0,0,167,166,1,0,0,0,167,168,1,0,0,0,168,228,
1,0,0,0,169,171,5,17,0,0,170,172,5,19,0,0,171,170,1,0,0,0,171,172,1,0,0,
0,172,173,1,0,0,0,173,178,3,54,27,0,174,175,5,19,0,0,175,177,3,54,27,0,176,
174,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,182,1,0,
0,0,180,178,1,0,0,0,181,183,5,19,0,0,182,181,1,0,0,0,182,183,1,0,0,0,183,
184,1,0,0,0,184,187,5,18,0,0,185,188,3,10,5,0,186,188,3,12,6,0,187,185,1,
0,0,0,187,186,1,0,0,0,188,189,1,0,0,0,189,190,5,18,0,0,190,229,1,0,0,0,191,
193,3,54,27,0,192,194,5,19,0,0,193,192,1,0,0,0,193,194,1,0,0,0,194,195,1,
0,0,0,195,197,5,17,0,0,196,198,5,19,0,0,197,196,1,0,0,0,197,198,1,0,0,0,
198,199,1,0,0,0,199,201,5,2,0,0,200,202,5,19,0,0,201,200,1,0,0,0,201,202,
1,0,0,0,202,203,1,0,0,0,203,205,5,17,0,0,204,206,5,19,0,0,205,204,1,0,0,
0,205,206,1,0,0,0,206,208,1,0,0,0,207,209,3,54,27,0,208,207,1,0,0,0,208,
209,1,0,0,0,209,214,1,0,0,0,210,211,5,19,0,0,211,213,3,54,27,0,212,210,1,
0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,218,1,0,0,0,216,
214,1,0,0,0,217,219,5,19,0,0,218,217,1,0,0,0,218,219,1,0,0,0,219,220,1,0,
0,0,220,222,5,18,0,0,221,223,5,19,0,0,222,221,1,0,0,0,222,223,1,0,0,0,223,
224,1,0,0,0,224,225,3,10,5,0,225,226,5,18,0,0,226,227,5,18,0,0,227,229,1,
0,0,0,228,169,1,0,0,0,228,191,1,0,0,0,229,9,1,0,0,0,230,232,5,19,0,0,231,
230,1,0,0,0,231,232,1,0,0,0,232,249,1,0,0,0,233,248,3,2,1,0,234,248,3,18,
9,0,235,248,3,22,11,0,236,237,5,19,0,0,237,248,3,52,26,0,238,239,5,19,0,
0,239,248,3,54,27,0,240,248,3,26,13,0,241,248,3,30,15,0,242,248,3,44,22,
0,243,248,3,48,24,0,244,248,3,50,25,0,245,248,3,46,23,0,246,248,3,16,8,0,
247,233,1,0,0,0,247,234,1,0,0,0,247,235,1,0,0,0,247,236,1,0,0,0,247,238,
1,0,0,0,247,240,1,0,0,0,247,241,1,0,0,0,247,242,1,0,0,0,247,243,1,0,0,0,
247,244,1,0,0,0,247,245,1,0,0,0,247,246,1,0,0,0,248,251,1,0,0,0,249,247,
1,0,0,0,249,250,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,252,254,5,19,0,0,
253,252,1,0,0,0,253,254,1,0,0,0,254,11,1,0,0,0,255,257,5,19,0,0,256,255,
1,0,0,0,256,257,1,0,0,0,257,258,1,0,0,0,258,260,5,17,0,0,259,261,5,19,0,
0,260,259,1,0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,264,5,3,0,0,263,265,
5,19,0,0,264,263,1,0,0,0,264,265,1,0,0,0,265,266,1,0,0,0,266,268,5,17,0,
0,267,269,5,19,0,0,268,267,1,0,0,0,268,269,1,0,0,0,269,279,1,0,0,0,270,271,
5,17,0,0,271,272,3,14,7,0,272,273,5,18,0,0,273,275,1,0,0,0,274,276,5,19,
0,0,275,274,1,0,0,0,275,276,1,0,0,0,276,278,1,0,0,0,277,270,1,0,0,0,278,
281,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,282,1,0,0,0,281,279,1,0,
0,0,282,284,5,18,0,0,283,285,5,19,0,0,284,283,1,0,0,0,284,285,1,0,0,0,285,
286,1,0,0,0,286,288,3,10,5,0,287,289,5,19,0,0,288,287,1,0,0,0,288,289,1,
0,0,0,289,290,1,0,0,0,290,292,5,18,0,0,291,293,5,19,0,0,292,291,1,0,0,0,
292,293,1,0,0,0,293,13,1,0,0,0,294,296,5,19,0,0,295,294,1,0,0,0,295,296,
1,0,0,0,296,297,1,0,0,0,297,308,3,54,27,0,298,309,3,2,1,0,299,300,5,19,0,
0,300,309,3,52,26,0,301,302,5,19,0,0,302,309,3,54,27,0,303,309,3,26,13,0,
304,309,3,46,23,0,305,309,3,48,24,0,306,309,3,22,11,0,307,309,3,18,9,0,308,
298,1,0,0,0,308,299,1,0,0,0,308,301,1,0,0,0,308,303,1,0,0,0,308,304,1,0,
0,0,308,305,1,0,0,0,308,306,1,0,0,0,308,307,1,0,0,0,309,311,1,0,0,0,310,
312,5,19,0,0,311,310,1,0,0,0,311,312,1,0,0,0,312,15,1,0,0,0,313,315,5,19,
0,0,314,313,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,318,5,17,0,0,317,
319,5,19,0,0,318,317,1,0,0,0,318,319,1,0,0,0,319,320,1,0,0,0,320,336,5,4,
0,0,321,335,3,2,1,0,322,323,5,19,0,0,323,335,3,52,26,0,324,325,5,19,0,0,
325,335,3,54,27,0,326,335,3,26,13,0,327,335,3,44,22,0,328,335,3,50,25,0,
329,335,3,30,15,0,330,335,3,46,23,0,331,335,3,48,24,0,332,335,3,22,11,0,
333,335,3,18,9,0,334,321,1,0,0,0,334,322,1,0,0,0,334,324,1,0,0,0,334,326,
1,0,0,0,334,327,1,0,0,0,334,328,1,0,0,0,334,329,1,0,0,0,334,330,1,0,0,0,
334,331,1,0,0,0,334,332,1,0,0,0,334,333,1,0,0,0,335,338,1,0,0,0,336,334,
1,0,0,0,336,337,1,0,0,0,337,340,1,0,0,0,338,336,1,0,0,0,339,341,5,19,0,0,
340,339,1,0,0,0,340,341,1,0,0,0,341,342,1,0,0,0,342,344,5,18,0,0,343,345,
5,19,0,0,344,343,1,0,0,0,344,345,1,0,0,0,345,17,1,0,0,0,346,348,5,19,0,0,
347,346,1,0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,351,5,17,0,0,350,352,
5,19,0,0,351,350,1,0,0,0,351,352,1,0,0,0,352,353,1,0,0,0,353,366,3,36,18,
0,354,367,3,18,9,0,355,367,3,2,1,0,356,357,5,19,0,0,357,367,3,52,26,0,358,
359,5,19,0,0,359,367,3,54,27,0,360,367,3,26,13,0,361,367,3,22,11,0,362,367,
3,16,8,0,363,367,3,30,15,0,364,367,3,46,23,0,365,367,3,48,24,0,366,354,1,
0,0,0,366,355,1,0,0,0,366,356,1,0,0,0,366,358,1,0,0,0,366,360,1,0,0,0,366,
361,1,0,0,0,366,362,1,0,0,0,366,363,1,0,0,0,366,364,1,0,0,0,366,365,1,0,
0,0,367,380,1,0,0,0,368,381,3,18,9,0,369,381,3,2,1,0,370,371,5,19,0,0,371,
381,3,52,26,0,372,373,5,19,0,0,373,381,3,54,27,0,374,381,3,26,13,0,375,381,
3,22,11,0,376,381,3,16,8,0,377,381,3,30,15,0,378,381,3,46,23,0,379,381,3,
48,24,0,380,368,1,0,0,0,380,369,1,0,0,0,380,370,1,0,0,0,380,372,1,0,0,0,
380,374,1,0,0,0,380,375,1,0,0,0,380,376,1,0,0,0,380,377,1,0,0,0,380,378,
1,0,0,0,380,379,1,0,0,0,381,383,1,0,0,0,382,384,5,19,0,0,383,382,1,0,0,0,
383,384,1,0,0,0,384,385,1,0,0,0,385,387,5,18,0,0,386,388,5,19,0,0,387,386,
1,0,0,0,387,388,1,0,0,0,388,19,1,0,0,0,389,391,5,19,0,0,390,389,1,0,0,0,
390,391,1,0,0,0,391,392,1,0,0,0,392,394,5,17,0,0,393,395,5,19,0,0,394,393,
1,0,0,0,394,395,1,0,0,0,395,396,1,0,0,0,396,409,3,38,19,0,397,410,3,18,9,
0,398,410,3,2,1,0,399,400,5,19,0,0,400,410,3,52,26,0,401,402,5,19,0,0,402,
410,3,54,27,0,403,410,3,26,13,0,404,410,3,22,11,0,405,410,3,16,8,0,406,410,
3,30,15,0,407,410,3,46,23,0,408,410,3,48,24,0,409,397,1,0,0,0,409,398,1,
0,0,0,409,399,1,0,0,0,409,401,1,0,0,0,409,403,1,0,0,0,409,404,1,0,0,0,409,
405,1,0,0,0,409,406,1,0,0,0,409,407,1,0,0,0,409,408,1,0,0,0,410,423,1,0,
0,0,411,424,3,18,9,0,412,424,3,2,1,0,413,414,5,19,0,0,414,424,3,52,26,0,
415,416,5,19,0,0,416,424,3,54,27,0,417,424,3,26,13,0,418,424,3,22,11,0,419,
424,3,16,8,0,420,424,3,30,15,0,421,424,3,46,23,0,422,424,3,48,24,0,423,411,
1,0,0,0,423,412,1,0,0,0,423,413,1,0,0,0,423,415,1,0,0,0,423,417,1,0,0,0,
423,418,1,0,0,0,423,419,1,0,0,0,423,420,1,0,0,0,423,421,1,0,0,0,423,422,
1,0,0,0,424,426,1,0,0,0,425,427,5,19,0,0,426,425,1,0,0,0,426,427,1,0,0,0,
427,428,1,0,0,0,428,430,5,18,0,0,429,431,5,19,0,0,430,429,1,0,0,0,430,431,
1,0,0,0,431,21,1,0,0,0,432,434,5,19,0,0,433,432,1,0,0,0,433,434,1,0,0,0,
434,435,1,0,0,0,435,437,5,17,0,0,436,438,5,19,0,0,437,436,1,0,0,0,437,438,
1,0,0,0,438,439,1,0,0,0,439,452,3,40,20,0,440,453,3,18,9,0,441,453,3,2,1,
0,442,443,5,19,0,0,443,453,3,52,26,0,444,445,5,19,0,0,445,453,3,54,27,0,
446,453,3,26,13,0,447,453,3,22,11,0,448,453,3,16,8,0,449,453,3,30,15,0,450,
453,3,46,23,0,451,453,3,48,24,0,452,440,1,0,0,0,452,441,1,0,0,0,452,442,
1,0,0,0,452,444,1,0,0,0,452,446,1,0,0,0,452,447,1,0,0,0,452,448,1,0,0,0,
452,449,1,0,0,0,452,450,1,0,0,0,452,451,1,0,0,0,453,455,1,0,0,0,454,456,
5,19,0,0,455,454,1,0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,457,459,5,18,0,
0,458,460,5,19,0,0,459,458,1,0,0,0,459,460,1,0,0,0,460,23,1,0,0,0,461,463,
5,19,0,0,462,461,1,0,0,0,462,463,1,0,0,0,463,464,1,0,0,0,464,466,5,17,0,
0,465,467,5,19,0,0,466,465,1,0,0,0,466,467,1,0,0,0,467,468,1,0,0,0,468,481,
3,42,21,0,469,482,3,18,9,0,470,482,3,2,1,0,471,472,5,19,0,0,472,482,3,52,
26,0,473,474,5,19,0,0,474,482,3,54,27,0,475,482,3,26,13,0,476,482,3,22,11,
0,477,482,3,16,8,0,478,482,3,30,15,0,479,482,3,46,23,0,480,482,3,48,24,0,
481,469,1,0,0,0,481,470,1,0,0,0,481,471,1,0,0,0,481,473,1,0,0,0,481,475,
1,0,0,0,481,476,1,0,0,0,481,477,1,0,0,0,481,478,1,0,0,0,481,479,1,0,0,0,
481,480,1,0,0,0,482,484,1,0,0,0,483,485,5,19,0,0,484,483,1,0,0,0,484,485,
1,0,0,0,485,486,1,0,0,0,486,488,5,18,0,0,487,489,5,19,0,0,488,487,1,0,0,
0,488,489,1,0,0,0,489,25,1,0,0,0,490,492,5,19,0,0,491,490,1,0,0,0,491,492,
1,0,0,0,492,493,1,0,0,0,493,495,5,17,0,0,494,496,5,19,0,0,495,494,1,0,0,
0,495,496,1,0,0,0,496,497,1,0,0,0,497,513,3,54,27,0,498,512,3,18,9,0,499,
512,3,2,1,0,500,501,5,19,0,0,501,512,3,52,26,0,502,503,5,19,0,0,503,512,
3,54,27,0,504,512,3,26,13,0,505,512,3,22,11,0,506,512,3,16,8,0,507,512,3,
30,15,0,508,512,3,46,23,0,509,512,3,48,24,0,510,512,3,28,14,0,511,498,1,
0,0,0,511,499,1,0,0,0,511,500,1,0,0,0,511,502,1,0,0,0,511,504,1,0,0,0,511,
505,1,0,0,0,511,506,1,0,0,0,511,507,1,0,0,0,511,508,1,0,0,0,511,509,1,0,
0,0,511,510,1,0,0,0,512,515,1,0,0,0,513,511,1,0,0,0,513,514,1,0,0,0,514,
517,1,0,0,0,515,513,1,0,0,0,516,518,5,19,0,0,517,516,1,0,0,0,517,518,1,0,
0,0,518,519,1,0,0,0,519,521,5,18,0,0,520,522,5,19,0,0,521,520,1,0,0,0,521,
522,1,0,0,0,522,27,1,0,0,0,523,525,5,19,0,0,524,523,1,0,0,0,524,525,1,0,
0,0,525,526,1,0,0,0,526,528,5,17,0,0,527,529,5,19,0,0,528,527,1,0,0,0,528,
529,1,0,0,0,529,530,1,0,0,0,530,532,5,2,0,0,531,533,5,19,0,0,532,531,1,0,
0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,536,5,17,0,0,535,537,5,19,0,0,536,
535,1,0,0,0,536,537,1,0,0,0,537,539,1,0,0,0,538,540,3,54,27,0,539,538,1,
0,0,0,539,540,1,0,0,0,540,545,1,0,0,0,541,542,5,19,0,0,542,544,3,54,27,0,
543,541,1,0,0,0,544,547,1,0,0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,549,
1,0,0,0,547,545,1,0,0,0,548,550,5,19,0,0,549,548,1,0,0,0,549,550,1,0,0,0,
550,551,1,0,0,0,551,553,5,18,0,0,552,554,5,19,0,0,553,552,1,0,0,0,553,554,
1,0,0,0,554,562,1,0,0,0,555,558,3,2,1,0,556,558,3,26,13,0,557,555,1,0,0,
0,557,556,1,0,0,0,558,560,1,0,0,0,559,561,5,19,0,0,560,559,1,0,0,0,560,561,
1,0,0,0,561,563,1,0,0,0,562,557,1,0,0,0,563,564,1,0,0,0,564,562,1,0,0,0,
564,565,1,0,0,0,565,566,1,0,0,0,566,568,5,18,0,0,567,569,5,19,0,0,568,567,
1,0,0,0,568,569,1,0,0,0,569,29,1,0,0,0,570,572,5,19,0,0,571,570,1,0,0,0,
571,572,1,0,0,0,572,573,1,0,0,0,573,575,5,17,0,0,574,576,5,19,0,0,575,574,
1,0,0,0,575,576,1,0,0,0,576,577,1,0,0,0,577,593,5,5,0,0,578,594,3,18,9,0,
579,594,3,2,1,0,580,581,5,19,0,0,581,594,3,52,26,0,582,583,5,19,0,0,583,
594,3,54,27,0,584,594,3,26,13,0,585,594,3,22,11,0,586,594,3,16,8,0,587,594,
3,30,15,0,588,594,3,46,23,0,589,594,3,48,24,0,590,594,3,4,2,0,591,594,3,
20,10,0,592,594,3,24,12,0,593,578,1,0,0,0,593,579,1,0,0,0,593,580,1,0,0,
0,593,582,1,0,0,0,593,584,1,0,0,0,593,585,1,0,0,0,593,586,1,0,0,0,593,587,
1,0,0,0,593,588,1,0,0,0,593,589,1,0,0,0,593,590,1,0,0,0,593,591,1,0,0,0,
593,592,1,0,0,0,594,596,1,0,0,0,595,597,5,19,0,0,596,595,1,0,0,0,596,597,
1,0,0,0,597,612,1,0,0,0,598,613,3,18,9,0,599,613,3,2,1,0,600,601,5,19,0,
0,601,613,3,52,26,0,602,603,5,19,0,0,603,613,3,54,27,0,604,613,3,26,13,0,
605,613,3,22,11,0,606,613,3,16,8,0,607,613,3,30,15,0,608,613,3,46,23,0,609,
613,3,48,24,0,610,613,3,44,22,0,611,613,3,50,25,0,612,598,1,0,0,0,612,599,
1,0,0,0,612,600,1,0,0,0,612,602,1,0,0,0,612,604,1,0,0,0,612,605,1,0,0,0,
612,606,1,0,0,0,612,607,1,0,0,0,612,608,1,0,0,0,612,609,1,0,0,0,612,610,
1,0,0,0,612,611,1,0,0,0,613,628,1,0,0,0,614,629,3,18,9,0,615,629,3,2,1,0,
616,617,5,19,0,0,617,629,3,52,26,0,618,619,5,19,0,0,619,629,3,54,27,0,620,
629,3,26,13,0,621,629,3,22,11,0,622,629,3,16,8,0,623,629,3,30,15,0,624,629,
3,46,23,0,625,629,3,48,24,0,626,629,3,44,22,0,627,629,3,50,25,0,628,614,
1,0,0,0,628,615,1,0,0,0,628,616,1,0,0,0,628,618,1,0,0,0,628,620,1,0,0,0,
628,621,1,0,0,0,628,622,1,0,0,0,628,623,1,0,0,0,628,624,1,0,0,0,628,625,
1,0,0,0,628,626,1,0,0,0,628,627,1,0,0,0,628,629,1,0,0,0,629,631,1,0,0,0,
630,632,5,19,0,0,631,630,1,0,0,0,631,632,1,0,0,0,632,633,1,0,0,0,633,635,
5,18,0,0,634,636,5,19,0,0,635,634,1,0,0,0,635,636,1,0,0,0,636,31,1,0,0,0,
637,638,5,10,0,0,638,33,1,0,0,0,639,640,5,11,0,0,640,35,1,0,0,0,641,642,
5,12,0,0,642,37,1,0,0,0,643,644,5,13,0,0,644,39,1,0,0,0,645,646,5,14,0,0,
646,41,1,0,0,0,647,648,5,15,0,0,648,43,1,0,0,0,649,651,5,19,0,0,650,649,
1,0,0,0,650,651,1,0,0,0,651,652,1,0,0,0,652,654,5,17,0,0,653,655,5,19,0,
0,654,653,1,0,0,0,654,655,1,0,0,0,655,656,1,0,0,0,656,657,5,6,0,0,657,658,
5,19,0,0,658,660,3,14,7,0,659,661,5,19,0,0,660,659,1,0,0,0,660,661,1,0,0,
0,661,662,1,0,0,0,662,664,5,18,0,0,663,665,5,19,0,0,664,663,1,0,0,0,664,
665,1,0,0,0,665,45,1,0,0,0,666,668,5,19,0,0,667,666,1,0,0,0,667,668,1,0,
0,0,668,669,1,0,0,0,669,671,5,17,0,0,670,672,5,19,0,0,671,670,1,0,0,0,671,
672,1,0,0,0,672,673,1,0,0,0,673,686,5,7,0,0,674,685,3,18,9,0,675,685,3,2,
1,0,676,677,5,19,0,0,677,685,3,52,26,0,678,679,5,19,0,0,679,685,3,54,27,
0,680,685,3,26,13,0,681,685,3,22,11,0,682,685,3,16,8,0,683,685,3,30,15,0,
684,674,1,0,0,0,684,675,1,0,0,0,684,676,1,0,0,0,684,678,1,0,0,0,684,680,
1,0,0,0,684,681,1,0,0,0,684,682,1,0,0,0,684,683,1,0,0,0,685,688,1,0,0,0,
686,684,1,0,0,0,686,687,1,0,0,0,687,690,1,0,0,0,688,686,1,0,0,0,689,691,
5,19,0,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,694,5,18,0,
0,693,695,5,19,0,0,694,693,1,0,0,0,694,695,1,0,0,0,695,47,1,0,0,0,696,698,
5,19,0,0,697,696,1,0,0,0,697,698,1,0,0,0,698,699,1,0,0,0,699,701,5,17,0,
0,700,702,5,19,0,0,701,700,1,0,0,0,701,702,1,0,0,0,702,703,1,0,0,0,703,718,
5,8,0,0,704,717,3,18,9,0,705,717,3,2,1,0,706,707,5,19,0,0,707,717,3,52,26,
0,708,709,5,19,0,0,709,717,3,54,27,0,710,717,3,26,13,0,711,717,3,22,11,0,
712,717,3,16,8,0,713,717,3,30,15,0,714,717,3,46,23,0,715,717,3,48,24,0,716,
704,1,0,0,0,716,705,1,0,0,0,716,706,1,0,0,0,716,708,1,0,0,0,716,710,1,0,
0,0,716,711,1,0,0,0,716,712,1,0,0,0,716,713,1,0,0,0,716,714,1,0,0,0,716,
715,1,0,0,0,717,720,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,722,1,0,
0,0,720,718,1,0,0,0,721,723,5,19,0,0,722,721,1,0,0,0,722,723,1,0,0,0,723,
724,1,0,0,0,724,726,5,18,0,0,725,727,5,19,0,0,726,725,1,0,0,0,726,727,1,
0,0,0,727,49,1,0,0,0,728,730,5,19,0,0,729,728,1,0,0,0,729,730,1,0,0,0,730,
731,1,0,0,0,731,733,5,17,0,0,732,734,5,19,0,0,733,732,1,0,0,0,733,734,1,
0,0,0,734,735,1,0,0,0,735,748,5,9,0,0,736,749,3,18,9,0,737,749,3,2,1,0,738,
739,5,19,0,0,739,749,3,52,26,0,740,741,5,19,0,0,741,749,3,54,27,0,742,749,
3,26,13,0,743,749,3,22,11,0,744,749,3,16,8,0,745,749,3,30,15,0,746,749,3,
46,23,0,747,749,3,48,24,0,748,736,1,0,0,0,748,737,1,0,0,0,748,738,1,0,0,
0,748,740,1,0,0,0,748,742,1,0,0,0,748,743,1,0,0,0,748,744,1,0,0,0,748,745,
1,0,0,0,748,746,1,0,0,0,748,747,1,0,0,0,749,751,1,0,0,0,750,752,5,19,0,0,
751,750,1,0,0,0,751,752,1,0,0,0,752,753,1,0,0,0,753,755,5,18,0,0,754,756,
5,19,0,0,755,754,1,0,0,0,755,756,1,0,0,0,756,51,1,0,0,0,757,758,7,0,0,0,
758,53,1,0,0,0,759,760,5,16,0,0,760,55,1,0,0,0,127,57,71,73,78,82,97,99,
102,106,109,113,118,120,123,127,130,134,149,152,156,159,163,167,171,178,
182,187,193,197,201,205,208,214,218,222,228,231,247,249,253,256,260,264,
268,275,279,284,288,292,295,308,311,314,318,334,336,340,344,347,351,366,
380,383,387,390,394,409,423,426,430,433,437,452,455,459,462,466,481,484,
488,491,495,511,513,517,521,524,528,532,536,539,545,549,553,557,560,564,
568,571,575,593,596,612,628,631,635,650,654,660,664,667,671,684,686,690,
694,697,701,716,718,722,726,729,733,748,751,755];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class SchemeLikeLParser extends antlr4.Parser {

    static grammarFileName = "SchemeLikeL.g4";
    static literalNames = [ null, "'define'", "'lambda'", "'let'", "'begin'", 
                            "'if'", "'set!'", "'vector'", "'list'", "'display'", 
                            null, null, "'quotient'", null, null, "'null?'", 
                            null, "'('", "')'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, "OPERATOR", "LOGOPERATOR", "BIOPERATOR", 
                             "LOGBIOPERATOR", "UNIOPERATOR", "LOGUNIOPERATOR", 
                             "VARIABLE", "PSTART", "PEND", "SPACE", "FLOAT", 
                             "INT", "NFLOAT", "NINT", "WS" ];
    static ruleNames = [ "start", "expr", "logExpr", "defineGlobalVar", 
                         "defineFnc", "fncBodyExpr", "localFncBodyExpr", 
                         "varPairExpr", "beginExpr", "biExpr", "logBiExpr", 
                         "uniExpr", "logUniExpr", "callFnc", "callLambdaFnc", 
                         "ifExpr", "operatorExpr", "logOperatorExpr", "biOperatorExpr", 
                         "logBiOperatorExpr", "uniOperatorExpr", "logUniOperatorExpr", 
                         "setExpr", "vectorExpr", "listExpr", "displayExpr", 
                         "literal", "identifier" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SchemeLikeLParser.ruleNames;
        this.literalNames = SchemeLikeLParser.literalNames;
        this.symbolicNames = SchemeLikeLParser.symbolicNames;
    }



	start() {
	    let localctx = new StartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SchemeLikeLParser.RULE_start);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 57;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        if(la_===1) {
	            this.state = 56;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	        this.state = 71; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 71;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 59;
	                this.expr();
	                break;

	            case 2:
	                this.state = 60;
	                this.defineGlobalVar();
	                break;

	            case 3:
	                this.state = 61;
	                this.defineFnc();
	                break;

	            case 4:
	                this.state = 62;
	                this.literal();
	                break;

	            case 5:
	                this.state = 63;
	                this.identifier();
	                break;

	            case 6:
	                this.state = 64;
	                this.callFnc();
	                break;

	            case 7:
	                this.state = 65;
	                this.setExpr();
	                break;

	            case 8:
	                this.state = 66;
	                this.listExpr();
	                break;

	            case 9:
	                this.state = 67;
	                this.vectorExpr();
	                break;

	            case 10:
	                this.state = 68;
	                this.displayExpr();
	                break;

	            case 11:
	                this.state = 69;
	                this.uniExpr();
	                break;

	            case 12:
	                this.state = 70;
	                this.ifExpr();
	                break;

	            }
	            this.state = 73; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 16449536) !== 0));
	        this.state = 75;
	        this.match(SchemeLikeLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SchemeLikeLParser.RULE_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 78;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 77;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 80;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 82;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 81;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 84;
	        this.operatorExpr();
	        this.state = 97; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 97;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        		switch(la_) {
	        		case 1:
	        		    this.state = 85;
	        		    this.biExpr();
	        		    break;

	        		case 2:
	        		    this.state = 86;
	        		    this.expr();
	        		    break;

	        		case 3:
	        		    this.state = 87;
	        		    this.match(SchemeLikeLParser.SPACE);
	        		    this.state = 88;
	        		    this.literal();
	        		    break;

	        		case 4:
	        		    this.state = 89;
	        		    this.match(SchemeLikeLParser.SPACE);
	        		    this.state = 90;
	        		    this.identifier();
	        		    break;

	        		case 5:
	        		    this.state = 91;
	        		    this.callFnc();
	        		    break;

	        		case 6:
	        		    this.state = 92;
	        		    this.uniExpr();
	        		    break;

	        		case 7:
	        		    this.state = 93;
	        		    this.beginExpr();
	        		    break;

	        		case 8:
	        		    this.state = 94;
	        		    this.ifExpr();
	        		    break;

	        		case 9:
	        		    this.state = 95;
	        		    this.vectorExpr();
	        		    break;

	        		case 10:
	        		    this.state = 96;
	        		    this.listExpr();
	        		    break;

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 99; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,6, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 102;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 101;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 104;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 106;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        if(la_===1) {
	            this.state = 105;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logExpr() {
	    let localctx = new LogExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SchemeLikeLParser.RULE_logExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 109;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 108;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 111;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 113;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 112;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 115;
	        this.logOperatorExpr();
	        this.state = 118; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 118;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        		switch(la_) {
	        		case 1:
	        		    this.state = 116;
	        		    this.logUniExpr();
	        		    break;

	        		case 2:
	        		    this.state = 117;
	        		    this.logBiExpr();
	        		    break;

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 120; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,12, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 123;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 122;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 125;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 127;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        if(la_===1) {
	            this.state = 126;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defineGlobalVar() {
	    let localctx = new DefineGlobalVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SchemeLikeLParser.RULE_defineGlobalVar);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 130;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 129;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 132;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 134;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 133;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 136;
	        this.match(SchemeLikeLParser.T__0);
	        this.state = 137;
	        this.match(SchemeLikeLParser.SPACE);
	        this.state = 138;
	        this.identifier();
	        this.state = 149;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 139;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 140;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 141;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 142;
	            this.literal();
	            break;

	        case 3:
	            this.state = 143;
	            this.expr();
	            break;

	        case 4:
	            this.state = 144;
	            this.callFnc();
	            break;

	        case 5:
	            this.state = 145;
	            this.vectorExpr();
	            break;

	        case 6:
	            this.state = 146;
	            this.listExpr();
	            break;

	        case 7:
	            this.state = 147;
	            this.uniExpr();
	            break;

	        case 8:
	            this.state = 148;
	            this.biExpr();
	            break;

	        }
	        this.state = 152;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 151;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 154;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 156;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        if(la_===1) {
	            this.state = 155;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defineFnc() {
	    let localctx = new DefineFncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SchemeLikeLParser.RULE_defineFnc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 159;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 158;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 161;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 163;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 162;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 165;
	        this.match(SchemeLikeLParser.T__0);
	        this.state = 167;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 166;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 228;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 17:
	            this.state = 169;
	            this.match(SchemeLikeLParser.PSTART);
	            this.state = 171;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 170;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 173;
	            this.identifier();
	            this.state = 178;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 174;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 175;
	                    this.identifier(); 
	                }
	                this.state = 180;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
	            }

	            this.state = 182;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 181;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 184;
	            this.match(SchemeLikeLParser.PEND);
	            this.state = 187;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 185;
	                this.fncBodyExpr();
	                break;

	            case 2:
	                this.state = 186;
	                this.localFncBodyExpr();
	                break;

	            }
	            this.state = 189;
	            this.match(SchemeLikeLParser.PEND);
	            break;
	        case 16:
	            this.state = 191;
	            this.identifier();
	            this.state = 193;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 192;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 195;
	            this.match(SchemeLikeLParser.PSTART);
	            this.state = 197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 196;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 199;
	            this.match(SchemeLikeLParser.T__1);
	            this.state = 201;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 200;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 203;
	            this.match(SchemeLikeLParser.PSTART);
	            this.state = 205;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	            if(la_===1) {
	                this.state = 204;
	                this.match(SchemeLikeLParser.SPACE);

	            }
	            this.state = 208;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 207;
	                this.identifier();
	            }

	            this.state = 214;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,32,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 210;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 211;
	                    this.identifier(); 
	                }
	                this.state = 216;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,32,this._ctx);
	            }

	            this.state = 218;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 217;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 220;
	            this.match(SchemeLikeLParser.PEND);
	            this.state = 222;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	            if(la_===1) {
	                this.state = 221;
	                this.match(SchemeLikeLParser.SPACE);

	            }
	            this.state = 224;
	            this.fncBodyExpr();
	            this.state = 225;
	            this.match(SchemeLikeLParser.PEND);
	            this.state = 226;
	            this.match(SchemeLikeLParser.PEND);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fncBodyExpr() {
	    let localctx = new FncBodyExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SchemeLikeLParser.RULE_fncBodyExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 231;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        if(la_===1) {
	            this.state = 230;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	        this.state = 249;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,38,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 247;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 233;
	                    this.expr();
	                    break;

	                case 2:
	                    this.state = 234;
	                    this.biExpr();
	                    break;

	                case 3:
	                    this.state = 235;
	                    this.uniExpr();
	                    break;

	                case 4:
	                    this.state = 236;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 237;
	                    this.literal();
	                    break;

	                case 5:
	                    this.state = 238;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 239;
	                    this.identifier();
	                    break;

	                case 6:
	                    this.state = 240;
	                    this.callFnc();
	                    break;

	                case 7:
	                    this.state = 241;
	                    this.ifExpr();
	                    break;

	                case 8:
	                    this.state = 242;
	                    this.setExpr();
	                    break;

	                case 9:
	                    this.state = 243;
	                    this.listExpr();
	                    break;

	                case 10:
	                    this.state = 244;
	                    this.displayExpr();
	                    break;

	                case 11:
	                    this.state = 245;
	                    this.vectorExpr();
	                    break;

	                case 12:
	                    this.state = 246;
	                    this.beginExpr();
	                    break;

	                } 
	            }
	            this.state = 251;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,38,this._ctx);
	        }

	        this.state = 253;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        if(la_===1) {
	            this.state = 252;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localFncBodyExpr() {
	    let localctx = new LocalFncBodyExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SchemeLikeLParser.RULE_localFncBodyExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 255;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 258;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 260;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 259;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 262;
	        this.match(SchemeLikeLParser.T__2);
	        this.state = 264;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 263;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 266;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 268;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 267;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 279;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===17) {
	            this.state = 270;
	            this.match(SchemeLikeLParser.PSTART);
	            this.state = 271;
	            this.varPairExpr();
	            this.state = 272;
	            this.match(SchemeLikeLParser.PEND);
	            this.state = 275;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 274;
	                this.match(SchemeLikeLParser.SPACE);
	            }

	            this.state = 281;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 282;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        if(la_===1) {
	            this.state = 283;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	        this.state = 286;
	        this.fncBodyExpr();
	        this.state = 288;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 287;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 290;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 292;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 291;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varPairExpr() {
	    let localctx = new VarPairExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SchemeLikeLParser.RULE_varPairExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 295;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 294;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 297;
	        this.identifier();
	        this.state = 308;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 298;
	            this.expr();
	            break;

	        case 2:
	            this.state = 299;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 300;
	            this.literal();
	            break;

	        case 3:
	            this.state = 301;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 302;
	            this.identifier();
	            break;

	        case 4:
	            this.state = 303;
	            this.callFnc();
	            break;

	        case 5:
	            this.state = 304;
	            this.vectorExpr();
	            break;

	        case 6:
	            this.state = 305;
	            this.listExpr();
	            break;

	        case 7:
	            this.state = 306;
	            this.uniExpr();
	            break;

	        case 8:
	            this.state = 307;
	            this.biExpr();
	            break;

	        }
	        this.state = 311;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        if(la_===1) {
	            this.state = 310;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	beginExpr() {
	    let localctx = new BeginExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SchemeLikeLParser.RULE_beginExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 314;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 313;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 316;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 318;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 317;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 320;
	        this.match(SchemeLikeLParser.T__3);
	        this.state = 336;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 334;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 321;
	                    this.expr();
	                    break;

	                case 2:
	                    this.state = 322;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 323;
	                    this.literal();
	                    break;

	                case 3:
	                    this.state = 324;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 325;
	                    this.identifier();
	                    break;

	                case 4:
	                    this.state = 326;
	                    this.callFnc();
	                    break;

	                case 5:
	                    this.state = 327;
	                    this.setExpr();
	                    break;

	                case 6:
	                    this.state = 328;
	                    this.displayExpr();
	                    break;

	                case 7:
	                    this.state = 329;
	                    this.ifExpr();
	                    break;

	                case 8:
	                    this.state = 330;
	                    this.vectorExpr();
	                    break;

	                case 9:
	                    this.state = 331;
	                    this.listExpr();
	                    break;

	                case 10:
	                    this.state = 332;
	                    this.uniExpr();
	                    break;

	                case 11:
	                    this.state = 333;
	                    this.biExpr();
	                    break;

	                } 
	            }
	            this.state = 338;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
	        }

	        this.state = 340;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 339;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 342;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 344;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        if(la_===1) {
	            this.state = 343;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	biExpr() {
	    let localctx = new BiExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SchemeLikeLParser.RULE_biExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 347;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 346;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 349;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 351;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 350;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 353;
	        this.biOperatorExpr();
	        this.state = 366;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 354;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 355;
	            this.expr();
	            break;

	        case 3:
	            this.state = 356;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 357;
	            this.literal();
	            break;

	        case 4:
	            this.state = 358;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 359;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 360;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 361;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 362;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 363;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 364;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 365;
	            this.listExpr();
	            break;

	        }
	        this.state = 380;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 368;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 369;
	            this.expr();
	            break;

	        case 3:
	            this.state = 370;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 371;
	            this.literal();
	            break;

	        case 4:
	            this.state = 372;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 373;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 374;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 375;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 376;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 377;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 378;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 379;
	            this.listExpr();
	            break;

	        }
	        this.state = 383;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 382;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 385;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 387;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        if(la_===1) {
	            this.state = 386;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logBiExpr() {
	    let localctx = new LogBiExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SchemeLikeLParser.RULE_logBiExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 390;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 389;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 392;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 394;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 393;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 396;
	        this.logBiOperatorExpr();
	        this.state = 409;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 397;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 398;
	            this.expr();
	            break;

	        case 3:
	            this.state = 399;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 400;
	            this.literal();
	            break;

	        case 4:
	            this.state = 401;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 402;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 403;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 404;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 405;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 406;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 407;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 408;
	            this.listExpr();
	            break;

	        }
	        this.state = 423;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 411;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 412;
	            this.expr();
	            break;

	        case 3:
	            this.state = 413;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 414;
	            this.literal();
	            break;

	        case 4:
	            this.state = 415;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 416;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 417;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 418;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 419;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 420;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 421;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 422;
	            this.listExpr();
	            break;

	        }
	        this.state = 426;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 425;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 428;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 430;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        if(la_===1) {
	            this.state = 429;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniExpr() {
	    let localctx = new UniExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SchemeLikeLParser.RULE_uniExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 433;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 432;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 435;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 437;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 436;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 439;
	        this.uniOperatorExpr();
	        this.state = 452;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 440;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 441;
	            this.expr();
	            break;

	        case 3:
	            this.state = 442;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 443;
	            this.literal();
	            break;

	        case 4:
	            this.state = 444;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 445;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 446;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 447;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 448;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 449;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 450;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 451;
	            this.listExpr();
	            break;

	        }
	        this.state = 455;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 454;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 457;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 459;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        if(la_===1) {
	            this.state = 458;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logUniExpr() {
	    let localctx = new LogUniExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SchemeLikeLParser.RULE_logUniExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 462;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 461;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 464;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 466;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 465;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 468;
	        this.logUniOperatorExpr();
	        this.state = 481;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 469;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 470;
	            this.expr();
	            break;

	        case 3:
	            this.state = 471;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 472;
	            this.literal();
	            break;

	        case 4:
	            this.state = 473;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 474;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 475;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 476;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 477;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 478;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 479;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 480;
	            this.listExpr();
	            break;

	        }
	        this.state = 484;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 483;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 486;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 488;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        if(la_===1) {
	            this.state = 487;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callFnc() {
	    let localctx = new CallFncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SchemeLikeLParser.RULE_callFnc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 491;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 490;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 493;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 495;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 494;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 497;
	        this.identifier();
	        this.state = 513;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 511;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 498;
	                    this.biExpr();
	                    break;

	                case 2:
	                    this.state = 499;
	                    this.expr();
	                    break;

	                case 3:
	                    this.state = 500;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 501;
	                    this.literal();
	                    break;

	                case 4:
	                    this.state = 502;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 503;
	                    this.identifier();
	                    break;

	                case 5:
	                    this.state = 504;
	                    this.callFnc();
	                    break;

	                case 6:
	                    this.state = 505;
	                    this.uniExpr();
	                    break;

	                case 7:
	                    this.state = 506;
	                    this.beginExpr();
	                    break;

	                case 8:
	                    this.state = 507;
	                    this.ifExpr();
	                    break;

	                case 9:
	                    this.state = 508;
	                    this.vectorExpr();
	                    break;

	                case 10:
	                    this.state = 509;
	                    this.listExpr();
	                    break;

	                case 11:
	                    this.state = 510;
	                    this.callLambdaFnc();
	                    break;

	                } 
	            }
	            this.state = 515;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
	        }

	        this.state = 517;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 516;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 519;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 521;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        if(la_===1) {
	            this.state = 520;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callLambdaFnc() {
	    let localctx = new CallLambdaFncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SchemeLikeLParser.RULE_callLambdaFnc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 524;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 523;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 526;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 527;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 530;
	        this.match(SchemeLikeLParser.T__1);
	        this.state = 532;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 531;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 534;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 536;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        if(la_===1) {
	            this.state = 535;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	        this.state = 539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===16) {
	            this.state = 538;
	            this.identifier();
	        }

	        this.state = 545;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 541;
	                this.match(SchemeLikeLParser.SPACE);
	                this.state = 542;
	                this.identifier(); 
	            }
	            this.state = 547;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
	        }

	        this.state = 549;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 548;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 551;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 553;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        if(la_===1) {
	            this.state = 552;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	        this.state = 562; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 557;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 555;
	                this.expr();
	                break;

	            case 2:
	                this.state = 556;
	                this.callFnc();
	                break;

	            }
	            this.state = 560;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	            if(la_===1) {
	                this.state = 559;
	                this.match(SchemeLikeLParser.SPACE);

	            }
	            this.state = 564; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===17 || _la===19);
	        this.state = 566;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 568;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	        if(la_===1) {
	            this.state = 567;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifExpr() {
	    let localctx = new IfExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SchemeLikeLParser.RULE_ifExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 571;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 570;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 573;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 575;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 574;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 577;
	        this.match(SchemeLikeLParser.T__4);
	        this.state = 593;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 578;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 579;
	            this.expr();
	            break;

	        case 3:
	            this.state = 580;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 581;
	            this.literal();
	            break;

	        case 4:
	            this.state = 582;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 583;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 584;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 585;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 586;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 587;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 588;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 589;
	            this.listExpr();
	            break;

	        case 11:
	            this.state = 590;
	            this.logExpr();
	            break;

	        case 12:
	            this.state = 591;
	            this.logBiExpr();
	            break;

	        case 13:
	            this.state = 592;
	            this.logUniExpr();
	            break;

	        }
	        this.state = 596;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        if(la_===1) {
	            this.state = 595;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	        this.state = 612;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 598;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 599;
	            this.expr();
	            break;

	        case 3:
	            this.state = 600;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 601;
	            this.literal();
	            break;

	        case 4:
	            this.state = 602;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 603;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 604;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 605;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 606;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 607;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 608;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 609;
	            this.listExpr();
	            break;

	        case 11:
	            this.state = 610;
	            this.setExpr();
	            break;

	        case 12:
	            this.state = 611;
	            this.displayExpr();
	            break;

	        }
	        this.state = 628;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        if(la_===1) {
	            this.state = 614;
	            this.biExpr();

	        } else if(la_===2) {
	            this.state = 615;
	            this.expr();

	        } else if(la_===3) {
	            this.state = 616;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 617;
	            this.literal();

	        } else if(la_===4) {
	            this.state = 618;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 619;
	            this.identifier();

	        } else if(la_===5) {
	            this.state = 620;
	            this.callFnc();

	        } else if(la_===6) {
	            this.state = 621;
	            this.uniExpr();

	        } else if(la_===7) {
	            this.state = 622;
	            this.beginExpr();

	        } else if(la_===8) {
	            this.state = 623;
	            this.ifExpr();

	        } else if(la_===9) {
	            this.state = 624;
	            this.vectorExpr();

	        } else if(la_===10) {
	            this.state = 625;
	            this.listExpr();

	        } else if(la_===11) {
	            this.state = 626;
	            this.setExpr();

	        } else if(la_===12) {
	            this.state = 627;
	            this.displayExpr();

	        }
	        this.state = 631;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 630;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 633;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 635;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        if(la_===1) {
	            this.state = 634;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operatorExpr() {
	    let localctx = new OperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SchemeLikeLParser.RULE_operatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 637;
	        this.match(SchemeLikeLParser.OPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logOperatorExpr() {
	    let localctx = new LogOperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SchemeLikeLParser.RULE_logOperatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 639;
	        this.match(SchemeLikeLParser.LOGOPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	biOperatorExpr() {
	    let localctx = new BiOperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SchemeLikeLParser.RULE_biOperatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 641;
	        this.match(SchemeLikeLParser.BIOPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logBiOperatorExpr() {
	    let localctx = new LogBiOperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SchemeLikeLParser.RULE_logBiOperatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 643;
	        this.match(SchemeLikeLParser.LOGBIOPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniOperatorExpr() {
	    let localctx = new UniOperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SchemeLikeLParser.RULE_uniOperatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 645;
	        this.match(SchemeLikeLParser.UNIOPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logUniOperatorExpr() {
	    let localctx = new LogUniOperatorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SchemeLikeLParser.RULE_logUniOperatorExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 647;
	        this.match(SchemeLikeLParser.LOGUNIOPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setExpr() {
	    let localctx = new SetExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SchemeLikeLParser.RULE_setExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 650;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 649;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 652;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 654;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 653;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 656;
	        this.match(SchemeLikeLParser.T__5);
	        this.state = 657;
	        this.match(SchemeLikeLParser.SPACE);
	        this.state = 658;
	        this.varPairExpr();
	        this.state = 660;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 659;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 662;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 664;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        if(la_===1) {
	            this.state = 663;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vectorExpr() {
	    let localctx = new VectorExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SchemeLikeLParser.RULE_vectorExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 667;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 666;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 669;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 671;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 670;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 673;
	        this.match(SchemeLikeLParser.T__6);
	        this.state = 686;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,113,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 684;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 674;
	                    this.biExpr();
	                    break;

	                case 2:
	                    this.state = 675;
	                    this.expr();
	                    break;

	                case 3:
	                    this.state = 676;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 677;
	                    this.literal();
	                    break;

	                case 4:
	                    this.state = 678;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 679;
	                    this.identifier();
	                    break;

	                case 5:
	                    this.state = 680;
	                    this.callFnc();
	                    break;

	                case 6:
	                    this.state = 681;
	                    this.uniExpr();
	                    break;

	                case 7:
	                    this.state = 682;
	                    this.beginExpr();
	                    break;

	                case 8:
	                    this.state = 683;
	                    this.ifExpr();
	                    break;

	                } 
	            }
	            this.state = 688;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,113,this._ctx);
	        }

	        this.state = 690;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 689;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 692;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 694;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        if(la_===1) {
	            this.state = 693;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listExpr() {
	    let localctx = new ListExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SchemeLikeLParser.RULE_listExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 697;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 696;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 699;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 701;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 700;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 703;
	        this.match(SchemeLikeLParser.T__7);
	        this.state = 718;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 716;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 704;
	                    this.biExpr();
	                    break;

	                case 2:
	                    this.state = 705;
	                    this.expr();
	                    break;

	                case 3:
	                    this.state = 706;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 707;
	                    this.literal();
	                    break;

	                case 4:
	                    this.state = 708;
	                    this.match(SchemeLikeLParser.SPACE);
	                    this.state = 709;
	                    this.identifier();
	                    break;

	                case 5:
	                    this.state = 710;
	                    this.callFnc();
	                    break;

	                case 6:
	                    this.state = 711;
	                    this.uniExpr();
	                    break;

	                case 7:
	                    this.state = 712;
	                    this.beginExpr();
	                    break;

	                case 8:
	                    this.state = 713;
	                    this.ifExpr();
	                    break;

	                case 9:
	                    this.state = 714;
	                    this.vectorExpr();
	                    break;

	                case 10:
	                    this.state = 715;
	                    this.listExpr();
	                    break;

	                } 
	            }
	            this.state = 720;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
	        }

	        this.state = 722;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 721;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 724;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 726;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        if(la_===1) {
	            this.state = 725;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	displayExpr() {
	    let localctx = new DisplayExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SchemeLikeLParser.RULE_displayExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 729;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 728;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 731;
	        this.match(SchemeLikeLParser.PSTART);
	        this.state = 733;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 732;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 735;
	        this.match(SchemeLikeLParser.T__8);
	        this.state = 748;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 736;
	            this.biExpr();
	            break;

	        case 2:
	            this.state = 737;
	            this.expr();
	            break;

	        case 3:
	            this.state = 738;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 739;
	            this.literal();
	            break;

	        case 4:
	            this.state = 740;
	            this.match(SchemeLikeLParser.SPACE);
	            this.state = 741;
	            this.identifier();
	            break;

	        case 5:
	            this.state = 742;
	            this.callFnc();
	            break;

	        case 6:
	            this.state = 743;
	            this.uniExpr();
	            break;

	        case 7:
	            this.state = 744;
	            this.beginExpr();
	            break;

	        case 8:
	            this.state = 745;
	            this.ifExpr();
	            break;

	        case 9:
	            this.state = 746;
	            this.vectorExpr();
	            break;

	        case 10:
	            this.state = 747;
	            this.listExpr();
	            break;

	        }
	        this.state = 751;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 750;
	            this.match(SchemeLikeLParser.SPACE);
	        }

	        this.state = 753;
	        this.match(SchemeLikeLParser.PEND);
	        this.state = 755;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        if(la_===1) {
	            this.state = 754;
	            this.match(SchemeLikeLParser.SPACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SchemeLikeLParser.RULE_literal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 757;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 15728640) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SchemeLikeLParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 759;
	        this.match(SchemeLikeLParser.VARIABLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SchemeLikeLParser.EOF = antlr4.Token.EOF;
SchemeLikeLParser.T__0 = 1;
SchemeLikeLParser.T__1 = 2;
SchemeLikeLParser.T__2 = 3;
SchemeLikeLParser.T__3 = 4;
SchemeLikeLParser.T__4 = 5;
SchemeLikeLParser.T__5 = 6;
SchemeLikeLParser.T__6 = 7;
SchemeLikeLParser.T__7 = 8;
SchemeLikeLParser.T__8 = 9;
SchemeLikeLParser.OPERATOR = 10;
SchemeLikeLParser.LOGOPERATOR = 11;
SchemeLikeLParser.BIOPERATOR = 12;
SchemeLikeLParser.LOGBIOPERATOR = 13;
SchemeLikeLParser.UNIOPERATOR = 14;
SchemeLikeLParser.LOGUNIOPERATOR = 15;
SchemeLikeLParser.VARIABLE = 16;
SchemeLikeLParser.PSTART = 17;
SchemeLikeLParser.PEND = 18;
SchemeLikeLParser.SPACE = 19;
SchemeLikeLParser.FLOAT = 20;
SchemeLikeLParser.INT = 21;
SchemeLikeLParser.NFLOAT = 22;
SchemeLikeLParser.NINT = 23;
SchemeLikeLParser.WS = 24;

SchemeLikeLParser.RULE_start = 0;
SchemeLikeLParser.RULE_expr = 1;
SchemeLikeLParser.RULE_logExpr = 2;
SchemeLikeLParser.RULE_defineGlobalVar = 3;
SchemeLikeLParser.RULE_defineFnc = 4;
SchemeLikeLParser.RULE_fncBodyExpr = 5;
SchemeLikeLParser.RULE_localFncBodyExpr = 6;
SchemeLikeLParser.RULE_varPairExpr = 7;
SchemeLikeLParser.RULE_beginExpr = 8;
SchemeLikeLParser.RULE_biExpr = 9;
SchemeLikeLParser.RULE_logBiExpr = 10;
SchemeLikeLParser.RULE_uniExpr = 11;
SchemeLikeLParser.RULE_logUniExpr = 12;
SchemeLikeLParser.RULE_callFnc = 13;
SchemeLikeLParser.RULE_callLambdaFnc = 14;
SchemeLikeLParser.RULE_ifExpr = 15;
SchemeLikeLParser.RULE_operatorExpr = 16;
SchemeLikeLParser.RULE_logOperatorExpr = 17;
SchemeLikeLParser.RULE_biOperatorExpr = 18;
SchemeLikeLParser.RULE_logBiOperatorExpr = 19;
SchemeLikeLParser.RULE_uniOperatorExpr = 20;
SchemeLikeLParser.RULE_logUniOperatorExpr = 21;
SchemeLikeLParser.RULE_setExpr = 22;
SchemeLikeLParser.RULE_vectorExpr = 23;
SchemeLikeLParser.RULE_listExpr = 24;
SchemeLikeLParser.RULE_displayExpr = 25;
SchemeLikeLParser.RULE_literal = 26;
SchemeLikeLParser.RULE_identifier = 27;

class StartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_start;
    }

	EOF() {
	    return this.getToken(SchemeLikeLParser.EOF, 0);
	};

	SPACE() {
	    return this.getToken(SchemeLikeLParser.SPACE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	defineGlobalVar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefineGlobalVarContext);
	    } else {
	        return this.getTypedRuleContext(DefineGlobalVarContext,i);
	    }
	};

	defineFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefineFncContext);
	    } else {
	        return this.getTypedRuleContext(DefineFncContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	setExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetExprContext);
	    } else {
	        return this.getTypedRuleContext(SetExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	displayExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisplayExprContext);
	    } else {
	        return this.getTypedRuleContext(DisplayExprContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitStart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitStart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_expr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	operatorExpr() {
	    return this.getTypedRuleContext(OperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	logOperatorExpr() {
	    return this.getTypedRuleContext(LogOperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	logUniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogUniExprContext);
	    } else {
	        return this.getTypedRuleContext(LogUniExprContext,i);
	    }
	};

	logBiExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogBiExprContext);
	    } else {
	        return this.getTypedRuleContext(LogBiExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefineGlobalVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_defineGlobalVar;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	callFnc() {
	    return this.getTypedRuleContext(CallFncContext,0);
	};

	vectorExpr() {
	    return this.getTypedRuleContext(VectorExprContext,0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	uniExpr() {
	    return this.getTypedRuleContext(UniExprContext,0);
	};

	biExpr() {
	    return this.getTypedRuleContext(BiExprContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterDefineGlobalVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitDefineGlobalVar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitDefineGlobalVar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefineFncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_defineFnc;
    }

	PSTART = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PSTART);
	    } else {
	        return this.getToken(SchemeLikeLParser.PSTART, i);
	    }
	};


	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	PEND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PEND);
	    } else {
	        return this.getToken(SchemeLikeLParser.PEND, i);
	    }
	};


	fncBodyExpr() {
	    return this.getTypedRuleContext(FncBodyExprContext,0);
	};

	localFncBodyExpr() {
	    return this.getTypedRuleContext(LocalFncBodyExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterDefineFnc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitDefineFnc(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitDefineFnc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FncBodyExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_fncBodyExpr;
    }

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	setExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetExprContext);
	    } else {
	        return this.getTypedRuleContext(SetExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	displayExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisplayExprContext);
	    } else {
	        return this.getTypedRuleContext(DisplayExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterFncBodyExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitFncBodyExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitFncBodyExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalFncBodyExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_localFncBodyExpr;
    }

	PSTART = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PSTART);
	    } else {
	        return this.getToken(SchemeLikeLParser.PSTART, i);
	    }
	};


	PEND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PEND);
	    } else {
	        return this.getToken(SchemeLikeLParser.PEND, i);
	    }
	};


	fncBodyExpr() {
	    return this.getTypedRuleContext(FncBodyExprContext,0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	varPairExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VarPairExprContext);
	    } else {
	        return this.getTypedRuleContext(VarPairExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLocalFncBodyExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLocalFncBodyExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLocalFncBodyExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarPairExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_varPairExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	callFnc() {
	    return this.getTypedRuleContext(CallFncContext,0);
	};

	vectorExpr() {
	    return this.getTypedRuleContext(VectorExprContext,0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	uniExpr() {
	    return this.getTypedRuleContext(UniExprContext,0);
	};

	biExpr() {
	    return this.getTypedRuleContext(BiExprContext,0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterVarPairExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitVarPairExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitVarPairExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BeginExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_beginExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	setExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetExprContext);
	    } else {
	        return this.getTypedRuleContext(SetExprContext,i);
	    }
	};

	displayExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisplayExprContext);
	    } else {
	        return this.getTypedRuleContext(DisplayExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterBeginExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitBeginExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitBeginExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BiExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_biExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	biOperatorExpr() {
	    return this.getTypedRuleContext(BiOperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterBiExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitBiExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitBiExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogBiExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logBiExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	logBiOperatorExpr() {
	    return this.getTypedRuleContext(LogBiOperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogBiExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogBiExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogBiExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UniExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_uniExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	uniOperatorExpr() {
	    return this.getTypedRuleContext(UniOperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr() {
	    return this.getTypedRuleContext(BiExprContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	callFnc() {
	    return this.getTypedRuleContext(CallFncContext,0);
	};

	uniExpr() {
	    return this.getTypedRuleContext(UniExprContext,0);
	};

	beginExpr() {
	    return this.getTypedRuleContext(BeginExprContext,0);
	};

	ifExpr() {
	    return this.getTypedRuleContext(IfExprContext,0);
	};

	vectorExpr() {
	    return this.getTypedRuleContext(VectorExprContext,0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterUniExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitUniExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitUniExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogUniExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logUniExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	logUniOperatorExpr() {
	    return this.getTypedRuleContext(LogUniOperatorExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr() {
	    return this.getTypedRuleContext(BiExprContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	callFnc() {
	    return this.getTypedRuleContext(CallFncContext,0);
	};

	uniExpr() {
	    return this.getTypedRuleContext(UniExprContext,0);
	};

	beginExpr() {
	    return this.getTypedRuleContext(BeginExprContext,0);
	};

	ifExpr() {
	    return this.getTypedRuleContext(IfExprContext,0);
	};

	vectorExpr() {
	    return this.getTypedRuleContext(VectorExprContext,0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogUniExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogUniExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogUniExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CallFncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_callFnc;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	callLambdaFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallLambdaFncContext);
	    } else {
	        return this.getTypedRuleContext(CallLambdaFncContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterCallFnc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitCallFnc(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitCallFnc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CallLambdaFncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_callLambdaFnc;
    }

	PSTART = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PSTART);
	    } else {
	        return this.getToken(SchemeLikeLParser.PSTART, i);
	    }
	};


	PEND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.PEND);
	    } else {
	        return this.getToken(SchemeLikeLParser.PEND, i);
	    }
	};


	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterCallLambdaFnc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitCallLambdaFnc(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitCallLambdaFnc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_ifExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	logExpr() {
	    return this.getTypedRuleContext(LogExprContext,0);
	};

	logBiExpr() {
	    return this.getTypedRuleContext(LogBiExprContext,0);
	};

	logUniExpr() {
	    return this.getTypedRuleContext(LogUniExprContext,0);
	};

	setExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetExprContext);
	    } else {
	        return this.getTypedRuleContext(SetExprContext,i);
	    }
	};

	displayExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisplayExprContext);
	    } else {
	        return this.getTypedRuleContext(DisplayExprContext,i);
	    }
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterIfExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitIfExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitIfExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_operatorExpr;
    }

	OPERATOR() {
	    return this.getToken(SchemeLikeLParser.OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogOperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logOperatorExpr;
    }

	LOGOPERATOR() {
	    return this.getToken(SchemeLikeLParser.LOGOPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BiOperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_biOperatorExpr;
    }

	BIOPERATOR() {
	    return this.getToken(SchemeLikeLParser.BIOPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterBiOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitBiOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitBiOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogBiOperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logBiOperatorExpr;
    }

	LOGBIOPERATOR() {
	    return this.getToken(SchemeLikeLParser.LOGBIOPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogBiOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogBiOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogBiOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UniOperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_uniOperatorExpr;
    }

	UNIOPERATOR() {
	    return this.getToken(SchemeLikeLParser.UNIOPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterUniOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitUniOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitUniOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogUniOperatorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_logUniOperatorExpr;
    }

	LOGUNIOPERATOR() {
	    return this.getToken(SchemeLikeLParser.LOGUNIOPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLogUniOperatorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLogUniOperatorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLogUniOperatorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_setExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	varPairExpr() {
	    return this.getTypedRuleContext(VarPairExprContext,0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterSetExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitSetExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitSetExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VectorExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_vectorExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterVectorExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitVectorExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitVectorExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_listExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	biExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BiExprContext);
	    } else {
	        return this.getTypedRuleContext(BiExprContext,i);
	    }
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	callFnc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallFncContext);
	    } else {
	        return this.getTypedRuleContext(CallFncContext,i);
	    }
	};

	uniExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniExprContext);
	    } else {
	        return this.getTypedRuleContext(UniExprContext,i);
	    }
	};

	beginExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BeginExprContext);
	    } else {
	        return this.getTypedRuleContext(BeginExprContext,i);
	    }
	};

	ifExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IfExprContext);
	    } else {
	        return this.getTypedRuleContext(IfExprContext,i);
	    }
	};

	vectorExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VectorExprContext);
	    } else {
	        return this.getTypedRuleContext(VectorExprContext,i);
	    }
	};

	listExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExprContext);
	    } else {
	        return this.getTypedRuleContext(ListExprContext,i);
	    }
	};

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterListExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitListExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitListExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DisplayExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_displayExpr;
    }

	PSTART() {
	    return this.getToken(SchemeLikeLParser.PSTART, 0);
	};

	PEND() {
	    return this.getToken(SchemeLikeLParser.PEND, 0);
	};

	biExpr() {
	    return this.getTypedRuleContext(BiExprContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	callFnc() {
	    return this.getTypedRuleContext(CallFncContext,0);
	};

	uniExpr() {
	    return this.getTypedRuleContext(UniExprContext,0);
	};

	beginExpr() {
	    return this.getTypedRuleContext(BeginExprContext,0);
	};

	ifExpr() {
	    return this.getTypedRuleContext(IfExprContext,0);
	};

	vectorExpr() {
	    return this.getTypedRuleContext(VectorExprContext,0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	SPACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SchemeLikeLParser.SPACE);
	    } else {
	        return this.getToken(SchemeLikeLParser.SPACE, i);
	    }
	};


	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterDisplayExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitDisplayExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitDisplayExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_literal;
    }

	FLOAT() {
	    return this.getToken(SchemeLikeLParser.FLOAT, 0);
	};

	INT() {
	    return this.getToken(SchemeLikeLParser.INT, 0);
	};

	NFLOAT() {
	    return this.getToken(SchemeLikeLParser.NFLOAT, 0);
	};

	NINT() {
	    return this.getToken(SchemeLikeLParser.NINT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SchemeLikeLParser.RULE_identifier;
    }

	VARIABLE() {
	    return this.getToken(SchemeLikeLParser.VARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SchemeLikeLListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SchemeLikeLVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




SchemeLikeLParser.StartContext = StartContext; 
SchemeLikeLParser.ExprContext = ExprContext; 
SchemeLikeLParser.LogExprContext = LogExprContext; 
SchemeLikeLParser.DefineGlobalVarContext = DefineGlobalVarContext; 
SchemeLikeLParser.DefineFncContext = DefineFncContext; 
SchemeLikeLParser.FncBodyExprContext = FncBodyExprContext; 
SchemeLikeLParser.LocalFncBodyExprContext = LocalFncBodyExprContext; 
SchemeLikeLParser.VarPairExprContext = VarPairExprContext; 
SchemeLikeLParser.BeginExprContext = BeginExprContext; 
SchemeLikeLParser.BiExprContext = BiExprContext; 
SchemeLikeLParser.LogBiExprContext = LogBiExprContext; 
SchemeLikeLParser.UniExprContext = UniExprContext; 
SchemeLikeLParser.LogUniExprContext = LogUniExprContext; 
SchemeLikeLParser.CallFncContext = CallFncContext; 
SchemeLikeLParser.CallLambdaFncContext = CallLambdaFncContext; 
SchemeLikeLParser.IfExprContext = IfExprContext; 
SchemeLikeLParser.OperatorExprContext = OperatorExprContext; 
SchemeLikeLParser.LogOperatorExprContext = LogOperatorExprContext; 
SchemeLikeLParser.BiOperatorExprContext = BiOperatorExprContext; 
SchemeLikeLParser.LogBiOperatorExprContext = LogBiOperatorExprContext; 
SchemeLikeLParser.UniOperatorExprContext = UniOperatorExprContext; 
SchemeLikeLParser.LogUniOperatorExprContext = LogUniOperatorExprContext; 
SchemeLikeLParser.SetExprContext = SetExprContext; 
SchemeLikeLParser.VectorExprContext = VectorExprContext; 
SchemeLikeLParser.ListExprContext = ListExprContext; 
SchemeLikeLParser.DisplayExprContext = DisplayExprContext; 
SchemeLikeLParser.LiteralContext = LiteralContext; 
SchemeLikeLParser.IdentifierContext = IdentifierContext; 
